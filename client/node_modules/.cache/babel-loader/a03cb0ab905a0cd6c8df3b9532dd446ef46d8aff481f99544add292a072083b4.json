{"ast":null,"code":"const yaml = require('js-yaml');\nconst {\n  JSON_SCHEMA\n} = require('js-yaml');\nconst {\n  ParserError\n} = require('../util/errors');\nmodule.exports = {\n  /**\n   * The order that this parser will run, in relation to other parsers.\n   *\n   * @type {number}\n   */\n  order: 200,\n  /**\n   * Whether to allow \"empty\" files. This includes zero-byte files, as well as empty JSON objects.\n   *\n   * @type {boolean}\n   */\n  allowEmpty: true,\n  /**\n   * Determines whether this parser can parse a given file reference.\n   * Parsers that match will be tried, in order, until one successfully parses the file.\n   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case\n   * every parser will be tried.\n   *\n   * @type {RegExp|string[]|function}\n   */\n  canParse: ['.yaml', '.yml', '.json'],\n  // JSON is valid YAML\n\n  /**\n   * Parses the given file as YAML\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {Promise}\n   */\n  // eslint-disable-next-line require-await\n  async parse(file) {\n    let data = file.data;\n    if (Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n    if (typeof data === 'string') {\n      try {\n        return yaml.load(data, {\n          schema: JSON_SCHEMA\n        });\n      } catch (e) {\n        throw new ParserError(e.message, file.url);\n      }\n    }\n\n    // data is already a JavaScript value (object, array, number, null, NaN, etc.)\n    return data;\n  }\n};","map":{"version":3,"names":["yaml","require","JSON_SCHEMA","ParserError","module","exports","order","allowEmpty","canParse","parse","file","data","Buffer","isBuffer","toString","load","schema","e","message","url"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/@readme/json-schema-ref-parser/lib/parsers/yaml.js"],"sourcesContent":["const yaml = require('js-yaml');\nconst { JSON_SCHEMA } = require('js-yaml');\n\nconst { ParserError } = require('../util/errors');\n\nmodule.exports = {\n  /**\n   * The order that this parser will run, in relation to other parsers.\n   *\n   * @type {number}\n   */\n  order: 200,\n\n  /**\n   * Whether to allow \"empty\" files. This includes zero-byte files, as well as empty JSON objects.\n   *\n   * @type {boolean}\n   */\n  allowEmpty: true,\n\n  /**\n   * Determines whether this parser can parse a given file reference.\n   * Parsers that match will be tried, in order, until one successfully parses the file.\n   * Parsers that don't match will be skipped, UNLESS none of the parsers match, in which case\n   * every parser will be tried.\n   *\n   * @type {RegExp|string[]|function}\n   */\n  canParse: ['.yaml', '.yml', '.json'], // JSON is valid YAML\n\n  /**\n   * Parses the given file as YAML\n   *\n   * @param {object} file           - An object containing information about the referenced file\n   * @param {string} file.url       - The full URL of the referenced file\n   * @param {string} file.extension - The lowercased file extension (e.g. \".txt\", \".html\", etc.)\n   * @param {*}      file.data      - The file contents. This will be whatever data type was returned by the resolver\n   * @returns {Promise}\n   */\n  // eslint-disable-next-line require-await\n  async parse(file) {\n    let data = file.data;\n    if (Buffer.isBuffer(data)) {\n      data = data.toString();\n    }\n\n    if (typeof data === 'string') {\n      try {\n        return yaml.load(data, { schema: JSON_SCHEMA });\n      } catch (e) {\n        throw new ParserError(e.message, file.url);\n      }\n    }\n\n    // data is already a JavaScript value (object, array, number, null, NaN, etc.)\n    return data;\n  },\n};\n"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,SAAS,CAAC;AAC/B,MAAM;EAAEC;AAAY,CAAC,GAAGD,OAAO,CAAC,SAAS,CAAC;AAE1C,MAAM;EAAEE;AAAY,CAAC,GAAGF,OAAO,CAAC,gBAAgB,CAAC;AAEjDG,MAAM,CAACC,OAAO,GAAG;EACf;AACF;AACA;AACA;AACA;EACEC,KAAK,EAAE,GAAG;EAEV;AACF;AACA;AACA;AACA;EACEC,UAAU,EAAE,IAAI;EAEhB;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEC,QAAQ,EAAE,CAAC,OAAO,EAAE,MAAM,EAAE,OAAO,CAAC;EAAE;;EAEtC;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACE;EACA,MAAMC,KAAKA,CAACC,IAAI,EAAE;IAChB,IAAIC,IAAI,GAAGD,IAAI,CAACC,IAAI;IACpB,IAAIC,MAAM,CAACC,QAAQ,CAACF,IAAI,CAAC,EAAE;MACzBA,IAAI,GAAGA,IAAI,CAACG,QAAQ,CAAC,CAAC;IACxB;IAEA,IAAI,OAAOH,IAAI,KAAK,QAAQ,EAAE;MAC5B,IAAI;QACF,OAAOX,IAAI,CAACe,IAAI,CAACJ,IAAI,EAAE;UAAEK,MAAM,EAAEd;QAAY,CAAC,CAAC;MACjD,CAAC,CAAC,OAAOe,CAAC,EAAE;QACV,MAAM,IAAId,WAAW,CAACc,CAAC,CAACC,OAAO,EAAER,IAAI,CAACS,GAAG,CAAC;MAC5C;IACF;;IAEA;IACA,OAAOR,IAAI;EACb;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}