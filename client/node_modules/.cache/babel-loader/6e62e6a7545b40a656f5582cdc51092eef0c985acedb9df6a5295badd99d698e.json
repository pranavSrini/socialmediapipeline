{"ast":null,"code":"/* eslint-disable max-classes-per-file */\nconst {\n  Ono\n} = require('@jsdevtools/ono');\nconst {\n  stripHash,\n  toFileSystemPath\n} = require('./url');\nfunction setErrorName(err) {\n  Object.defineProperty(err.prototype, 'name', {\n    value: err.name,\n    enumerable: true\n  });\n}\nconst JSONParserError = class JSONParserError extends Error {\n  constructor(message, source) {\n    super();\n    this.code = 'EUNKNOWN';\n    this.message = message;\n    this.source = source;\n    this.path = null;\n    Ono.extend(this);\n  }\n  get footprint() {\n    return `${this.path}+${this.source}+${this.code}+${this.message}`;\n  }\n};\nexports.JSONParserError = JSONParserError;\nsetErrorName(JSONParserError);\nconst JSONParserErrorGroup = class JSONParserErrorGroup extends Error {\n  constructor(parser) {\n    super();\n    this.files = parser;\n    this.message = `${this.errors.length} error${this.errors.length > 1 ? 's' : ''} occurred while reading '${toFileSystemPath(parser.$refs._root$Ref.path)}'`;\n    Ono.extend(this);\n  }\n  static getParserErrors(parser) {\n    const errors = [];\n    for (const $ref of Object.values(parser.$refs._$refs)) {\n      if ($ref.errors) {\n        errors.push(...$ref.errors);\n      }\n    }\n    return errors;\n  }\n  get errors() {\n    return JSONParserErrorGroup.getParserErrors(this.files);\n  }\n};\nexports.JSONParserErrorGroup = JSONParserErrorGroup;\nsetErrorName(JSONParserErrorGroup);\nconst ParserError = class ParserError extends JSONParserError {\n  constructor(message, source) {\n    super(`Error parsing ${source}: ${message}`, source);\n    this.code = 'EPARSER';\n  }\n};\nexports.ParserError = ParserError;\nsetErrorName(ParserError);\nconst UnmatchedParserError = class UnmatchedParserError extends JSONParserError {\n  constructor(source) {\n    super(`Could not find parser for \"${source}\"`, source);\n    this.code = 'EUNMATCHEDPARSER';\n  }\n};\nexports.UnmatchedParserError = UnmatchedParserError;\nsetErrorName(UnmatchedParserError);\nconst ResolverError = class ResolverError extends JSONParserError {\n  constructor(ex, source) {\n    super(ex.message || `Error reading file \"${source}\"`, source);\n    this.code = 'ERESOLVER';\n    if ('code' in ex) {\n      this.ioErrorCode = String(ex.code);\n    }\n  }\n};\nexports.ResolverError = ResolverError;\nsetErrorName(ResolverError);\nconst UnmatchedResolverError = class UnmatchedResolverError extends JSONParserError {\n  constructor(source) {\n    super(`Could not find resolver for \"${source}\"`, source);\n    this.code = 'EUNMATCHEDRESOLVER';\n  }\n};\nexports.UnmatchedResolverError = UnmatchedResolverError;\nsetErrorName(UnmatchedResolverError);\nconst MissingPointerError = class MissingPointerError extends JSONParserError {\n  constructor(token, path) {\n    super(`Token \"${token}\" does not exist.`, stripHash(path));\n    this.code = 'EMISSINGPOINTER';\n  }\n};\nexports.MissingPointerError = MissingPointerError;\nsetErrorName(MissingPointerError);\nconst InvalidPointerError = class InvalidPointerError extends JSONParserError {\n  constructor(pointer, path) {\n    super(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`, stripHash(path));\n    this.code = 'EINVALIDPOINTER';\n  }\n};\nexports.InvalidPointerError = InvalidPointerError;\nsetErrorName(InvalidPointerError);\nexports.isHandledError = function (err) {\n  return err instanceof JSONParserError || err instanceof JSONParserErrorGroup;\n};\nexports.normalizeError = function (err) {\n  if (err.path === null) {\n    // eslint-disable-next-line no-param-reassign\n    err.path = [];\n  }\n  return err;\n};","map":{"version":3,"names":["Ono","require","stripHash","toFileSystemPath","setErrorName","err","Object","defineProperty","prototype","value","name","enumerable","JSONParserError","Error","constructor","message","source","code","path","extend","footprint","exports","JSONParserErrorGroup","parser","files","errors","length","$refs","_root$Ref","getParserErrors","$ref","values","_$refs","push","ParserError","UnmatchedParserError","ResolverError","ex","ioErrorCode","String","UnmatchedResolverError","MissingPointerError","token","InvalidPointerError","pointer","isHandledError","normalizeError"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/server/.api/apis/aivideoapi/node_modules/@readme/json-schema-ref-parser/lib/util/errors.js"],"sourcesContent":["/* eslint-disable max-classes-per-file */\nconst { Ono } = require('@jsdevtools/ono');\n\nconst { stripHash, toFileSystemPath } = require('./url');\n\nfunction setErrorName(err) {\n  Object.defineProperty(err.prototype, 'name', {\n    value: err.name,\n    enumerable: true,\n  });\n}\n\nconst JSONParserError = class JSONParserError extends Error {\n  constructor(message, source) {\n    super();\n\n    this.code = 'EUNKNOWN';\n    this.message = message;\n    this.source = source;\n    this.path = null;\n\n    Ono.extend(this);\n  }\n\n  get footprint() {\n    return `${this.path}+${this.source}+${this.code}+${this.message}`;\n  }\n};\n\nexports.JSONParserError = JSONParserError;\nsetErrorName(JSONParserError);\n\nconst JSONParserErrorGroup = class JSONParserErrorGroup extends Error {\n  constructor(parser) {\n    super();\n\n    this.files = parser;\n    this.message = `${this.errors.length} error${\n      this.errors.length > 1 ? 's' : ''\n    } occurred while reading '${toFileSystemPath(parser.$refs._root$Ref.path)}'`;\n\n    Ono.extend(this);\n  }\n\n  static getParserErrors(parser) {\n    const errors = [];\n\n    for (const $ref of Object.values(parser.$refs._$refs)) {\n      if ($ref.errors) {\n        errors.push(...$ref.errors);\n      }\n    }\n\n    return errors;\n  }\n\n  get errors() {\n    return JSONParserErrorGroup.getParserErrors(this.files);\n  }\n};\n\nexports.JSONParserErrorGroup = JSONParserErrorGroup;\nsetErrorName(JSONParserErrorGroup);\n\nconst ParserError = class ParserError extends JSONParserError {\n  constructor(message, source) {\n    super(`Error parsing ${source}: ${message}`, source);\n\n    this.code = 'EPARSER';\n  }\n};\n\nexports.ParserError = ParserError;\nsetErrorName(ParserError);\n\nconst UnmatchedParserError = class UnmatchedParserError extends JSONParserError {\n  constructor(source) {\n    super(`Could not find parser for \"${source}\"`, source);\n\n    this.code = 'EUNMATCHEDPARSER';\n  }\n};\n\nexports.UnmatchedParserError = UnmatchedParserError;\nsetErrorName(UnmatchedParserError);\n\nconst ResolverError = class ResolverError extends JSONParserError {\n  constructor(ex, source) {\n    super(ex.message || `Error reading file \"${source}\"`, source);\n\n    this.code = 'ERESOLVER';\n\n    if ('code' in ex) {\n      this.ioErrorCode = String(ex.code);\n    }\n  }\n};\nexports.ResolverError = ResolverError;\nsetErrorName(ResolverError);\n\nconst UnmatchedResolverError = class UnmatchedResolverError extends JSONParserError {\n  constructor(source) {\n    super(`Could not find resolver for \"${source}\"`, source);\n\n    this.code = 'EUNMATCHEDRESOLVER';\n  }\n};\n\nexports.UnmatchedResolverError = UnmatchedResolverError;\nsetErrorName(UnmatchedResolverError);\n\nconst MissingPointerError = class MissingPointerError extends JSONParserError {\n  constructor(token, path) {\n    super(`Token \"${token}\" does not exist.`, stripHash(path));\n\n    this.code = 'EMISSINGPOINTER';\n  }\n};\n\nexports.MissingPointerError = MissingPointerError;\nsetErrorName(MissingPointerError);\n\nconst InvalidPointerError = class InvalidPointerError extends JSONParserError {\n  constructor(pointer, path) {\n    super(`Invalid $ref pointer \"${pointer}\". Pointers must begin with \"#/\"`, stripHash(path));\n\n    this.code = 'EINVALIDPOINTER';\n  }\n};\n\nexports.InvalidPointerError = InvalidPointerError;\nsetErrorName(InvalidPointerError);\n\nexports.isHandledError = function (err) {\n  return err instanceof JSONParserError || err instanceof JSONParserErrorGroup;\n};\n\nexports.normalizeError = function (err) {\n  if (err.path === null) {\n    // eslint-disable-next-line no-param-reassign\n    err.path = [];\n  }\n\n  return err;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}