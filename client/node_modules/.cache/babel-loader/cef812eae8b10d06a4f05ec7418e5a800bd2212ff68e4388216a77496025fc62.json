{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.createFalClient = createFalClient;\nconst config_1 = require(\"./config\");\nconst queue_1 = require(\"./queue\");\nconst realtime_1 = require(\"./realtime\");\nconst request_1 = require(\"./request\");\nconst response_1 = require(\"./response\");\nconst storage_1 = require(\"./storage\");\nconst streaming_1 = require(\"./streaming\");\n/**\n * Creates a new reference of the `FalClient`.\n * @param userConfig Optional configuration to override the default settings.\n * @returns a new instance of the `FalClient`.\n */\nfunction createFalClient(userConfig = {}) {\n  const config = (0, config_1.createConfig)(userConfig);\n  const storage = (0, storage_1.createStorageClient)({\n    config\n  });\n  const queue = (0, queue_1.createQueueClient)({\n    config,\n    storage\n  });\n  const streaming = (0, streaming_1.createStreamingClient)({\n    config,\n    storage\n  });\n  const realtime = (0, realtime_1.createRealtimeClient)({\n    config\n  });\n  return {\n    queue,\n    realtime,\n    storage,\n    streaming,\n    stream: streaming.stream,\n    run(endpointId_1) {\n      return __awaiter(this, arguments, void 0, function* (endpointId, options = {}) {\n        const input = options.input ? yield storage.transformInput(options.input) : undefined;\n        return (0, request_1.dispatchRequest)({\n          method: options.method,\n          targetUrl: (0, request_1.buildUrl)(endpointId, options),\n          input: input,\n          config: Object.assign(Object.assign({}, config), {\n            responseHandler: response_1.resultResponseHandler\n          }),\n          options: {\n            signal: options.abortSignal\n          }\n        });\n      });\n    },\n    subscribe: (endpointId, options) => __awaiter(this, void 0, void 0, function* () {\n      const {\n        request_id: requestId\n      } = yield queue.submit(endpointId, options);\n      if (options.onEnqueue) {\n        options.onEnqueue(requestId);\n      }\n      yield queue.subscribeToStatus(endpointId, Object.assign({\n        requestId\n      }, options));\n      return queue.result(endpointId, {\n        requestId\n      });\n    })\n  };\n}","map":{"version":3,"names":["exports","createFalClient","config_1","require","queue_1","realtime_1","request_1","response_1","storage_1","streaming_1","userConfig","config","createConfig","storage","createStorageClient","queue","createQueueClient","streaming","createStreamingClient","realtime","createRealtimeClient","stream","run","endpointId_1","endpointId","options","input","transformInput","undefined","dispatchRequest","method","targetUrl","buildUrl","Object","assign","responseHandler","resultResponseHandler","signal","abortSignal","subscribe","__awaiter","request_id","requestId","submit","onEnqueue","subscribeToStatus","result"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/libs/client/src/client.ts"],"sourcesContent":["import { Config, createConfig } from \"./config\";\nimport { createQueueClient, QueueClient, QueueSubscribeOptions } from \"./queue\";\nimport { createRealtimeClient, RealtimeClient } from \"./realtime\";\nimport { buildUrl, dispatchRequest } from \"./request\";\nimport { resultResponseHandler } from \"./response\";\nimport { createStorageClient, StorageClient } from \"./storage\";\nimport { createStreamingClient, StreamingClient } from \"./streaming\";\nimport { EndpointType, InputType, OutputType } from \"./types/client\";\nimport { Result, RunOptions } from \"./types/common\";\n\n/**\n * The main client type, it provides access to simple API model usage,\n * as well as access to the `queue` and `storage` APIs.\n *\n * @see createFalClient\n */\nexport interface FalClient {\n  /**\n   * The queue client to interact with the queue API.\n   */\n  readonly queue: QueueClient;\n\n  /**\n   * The realtime client to interact with the realtime API\n   * and receive updates in real-time.\n   * @see #RealtimeClient\n   * @see #RealtimeClient.connect\n   */\n  readonly realtime: RealtimeClient;\n\n  /**\n   * The storage client to interact with the storage API.\n   */\n  readonly storage: StorageClient;\n\n  /**\n   * The streaming client to interact with the streaming API.\n   * @see #stream\n   */\n  readonly streaming: StreamingClient;\n\n  /**\n   * Runs a fal endpoint identified by its `endpointId`.\n   *\n   * @param endpointId The endpoint id, e.g. `fal-ai/fast-sdxl`.\n   * @param options The request options, including the input payload.\n   * @returns A promise that resolves to the result of the request once it's completed.\n   *\n   * @note\n   * We **do not recommend** this use for most use cases as it will block the client\n   * until the response is received. Moreover, if the connection is closed before\n   * the response is received, the request will be lost. Instead, we recommend\n   * using the `subscribe` method for most use cases.\n   */\n  run<Id extends EndpointType>(\n    endpointId: Id,\n    options: RunOptions<InputType<Id>>,\n  ): Promise<Result<OutputType<Id>>>;\n\n  /**\n   * Subscribes to updates for a specific request in the queue.\n   *\n   * @param endpointId - The ID of the API endpoint.\n   * @param options - Options to configure how the request is run and how updates are received.\n   * @returns A promise that resolves to the result of the request once it's completed.\n   */\n  subscribe<Id extends EndpointType>(\n    endpointId: Id,\n    options: RunOptions<InputType<Id>> & QueueSubscribeOptions,\n  ): Promise<Result<OutputType<Id>>>;\n\n  /**\n   * Calls a fal app that supports streaming and provides a streaming-capable\n   * object as a result, that can be used to get partial results through either\n   * `AsyncIterator` or through an event listener.\n   *\n   * @param endpointId the endpoint id, e.g. `fal-ai/llavav15-13b`.\n   * @param options the request options, including the input payload.\n   * @returns the `FalStream` instance.\n   */\n  stream: StreamingClient[\"stream\"];\n}\n\n/**\n * Creates a new reference of the `FalClient`.\n * @param userConfig Optional configuration to override the default settings.\n * @returns a new instance of the `FalClient`.\n */\nexport function createFalClient(userConfig: Config = {}): FalClient {\n  const config = createConfig(userConfig);\n  const storage = createStorageClient({ config });\n  const queue = createQueueClient({ config, storage });\n  const streaming = createStreamingClient({ config, storage });\n  const realtime = createRealtimeClient({ config });\n  return {\n    queue,\n    realtime,\n    storage,\n    streaming,\n    stream: streaming.stream,\n    async run<Id extends EndpointType>(\n      endpointId: Id,\n      options: RunOptions<InputType<Id>> = {},\n    ): Promise<Result<OutputType<Id>>> {\n      const input = options.input\n        ? await storage.transformInput(options.input)\n        : undefined;\n      return dispatchRequest<InputType<Id>, Result<OutputType<Id>>>({\n        method: options.method,\n        targetUrl: buildUrl(endpointId, options),\n        input: input as InputType<Id>,\n        config: {\n          ...config,\n          responseHandler: resultResponseHandler,\n        },\n        options: {\n          signal: options.abortSignal,\n        },\n      });\n    },\n    subscribe: async (endpointId, options) => {\n      const { request_id: requestId } = await queue.submit(endpointId, options);\n      if (options.onEnqueue) {\n        options.onEnqueue(requestId);\n      }\n      await queue.subscribeToStatus(endpointId, { requestId, ...options });\n      return queue.result(endpointId, { requestId });\n    },\n  };\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwFAA,OAAA,CAAAC,eAAA,GAAAA,eAAA;AAxFA,MAAAC,QAAA,GAAAC,OAAA;AACA,MAAAC,OAAA,GAAAD,OAAA;AACA,MAAAE,UAAA,GAAAF,OAAA;AACA,MAAAG,SAAA,GAAAH,OAAA;AACA,MAAAI,UAAA,GAAAJ,OAAA;AACA,MAAAK,SAAA,GAAAL,OAAA;AACA,MAAAM,WAAA,GAAAN,OAAA;AA6EA;;;;;AAKA,SAAgBF,eAAeA,CAACS,UAAA,GAAqB,EAAE;EACrD,MAAMC,MAAM,GAAG,IAAAT,QAAA,CAAAU,YAAY,EAACF,UAAU,CAAC;EACvC,MAAMG,OAAO,GAAG,IAAAL,SAAA,CAAAM,mBAAmB,EAAC;IAAEH;EAAM,CAAE,CAAC;EAC/C,MAAMI,KAAK,GAAG,IAAAX,OAAA,CAAAY,iBAAiB,EAAC;IAAEL,MAAM;IAAEE;EAAO,CAAE,CAAC;EACpD,MAAMI,SAAS,GAAG,IAAAR,WAAA,CAAAS,qBAAqB,EAAC;IAAEP,MAAM;IAAEE;EAAO,CAAE,CAAC;EAC5D,MAAMM,QAAQ,GAAG,IAAAd,UAAA,CAAAe,oBAAoB,EAAC;IAAET;EAAM,CAAE,CAAC;EACjD,OAAO;IACLI,KAAK;IACLI,QAAQ;IACRN,OAAO;IACPI,SAAS;IACTI,MAAM,EAAEJ,SAAS,CAACI,MAAM;IAClBC,GAAGA,CAAAC,YAAA;2DACPC,UAAc,EACdC,OAAA,GAAqC,EAAE;QAEvC,MAAMC,KAAK,GAAGD,OAAO,CAACC,KAAK,GACvB,MAAMb,OAAO,CAACc,cAAc,CAACF,OAAO,CAACC,KAAK,CAAC,GAC3CE,SAAS;QACb,OAAO,IAAAtB,SAAA,CAAAuB,eAAe,EAAwC;UAC5DC,MAAM,EAAEL,OAAO,CAACK,MAAM;UACtBC,SAAS,EAAE,IAAAzB,SAAA,CAAA0B,QAAQ,EAACR,UAAU,EAAEC,OAAO,CAAC;UACxCC,KAAK,EAAEA,KAAsB;UAC7Bf,MAAM,EAAAsB,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACDvB,MAAM;YACTwB,eAAe,EAAE5B,UAAA,CAAA6B;UAAqB,EACvC;UACDX,OAAO,EAAE;YACPY,MAAM,EAAEZ,OAAO,CAACa;;SAEnB,CAAC;MACJ,CAAC;KAAA;IACDC,SAAS,EAAEA,CAAOf,UAAU,EAAEC,OAAO,KAAIe,SAAA;MACvC,MAAM;QAAEC,UAAU,EAAEC;MAAS,CAAE,GAAG,MAAM3B,KAAK,CAAC4B,MAAM,CAACnB,UAAU,EAAEC,OAAO,CAAC;MACzE,IAAIA,OAAO,CAACmB,SAAS,EAAE;QACrBnB,OAAO,CAACmB,SAAS,CAACF,SAAS,CAAC;MAC9B;MACA,MAAM3B,KAAK,CAAC8B,iBAAiB,CAACrB,UAAU,EAAAS,MAAA,CAAAC,MAAA;QAAIQ;MAAS,GAAKjB,OAAO,EAAG;MACpE,OAAOV,KAAK,CAAC+B,MAAM,CAACtB,UAAU,EAAE;QAAEkB;MAAS,CAAE,CAAC;IAChD,CAAC;GACF;AACH","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}