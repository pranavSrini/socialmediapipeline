{"ast":null,"code":"/* eslint-disable import/order */\nconst $Ref = require('./ref');\nconst Pointer = require('./pointer');\nconst url = require('./util/url');\n\n/**\n * Bundles all external JSON references into the main JSON schema, thus resulting in a schema that\n * only has *internal* references, not any *external* references.\n * This method mutates the JSON schema object, adding new references and re-mapping existing ones.\n *\n * @param {$RefParser} parser\n * @param {$RefParserOptions} options\n */\nmodule.exports = function bundle(parser, options) {\n  // console.log('Bundling $ref pointers in %s', parser.$refs._root$Ref.path);\n\n  // Build an inventory of all $ref pointers in the JSON Schema\n  const inventory = [];\n  crawl(parser, 'schema', `${parser.$refs._root$Ref.path}#`, '#', 0, inventory, parser.$refs, options);\n\n  // Remap all $ref pointers\n  remap(inventory);\n};\n\n/**\n * Recursively crawls the given value, and inventories all JSON references.\n *\n * @param {object} parent - The object containing the value to crawl. If the value is not an object or array, it will be ignored.\n * @param {string} key - The property key of `parent` to be crawled\n * @param {string} path - The full path of the property being crawled, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of the property being crawled, from the schema root\n * @param {object[]} inventory - An array of already-inventoried $ref pointers\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n */\nfunction crawl(parent, key, path, pathFromRoot, indirections, inventory, $refs, options) {\n  const obj = key === null ? parent : parent[key];\n  if (obj && typeof obj === 'object' && !ArrayBuffer.isView(obj)) {\n    if ($Ref.isAllowed$Ref(obj)) {\n      inventory$Ref(parent, key, path, pathFromRoot, indirections, inventory, $refs, options);\n    } else {\n      // Crawl the object in a specific order that's optimized for bundling.\n      // This is important because it determines how `pathFromRoot` gets built,\n      // which later determines which keys get dereferenced and which ones get remapped\n      const keys = Object.keys(obj).sort((a, b) => {\n        // Most people will expect references to be bundled into the the \"definitions\" property,\n        // so we always crawl that property first, if it exists.\n        if (a === 'definitions') {\n          return -1;\n        } else if (b === 'definitions') {\n          return 1;\n        }\n\n        // Otherwise, crawl the keys based on their length.\n        // This produces the shortest possible bundled references\n        return a.length - b.length;\n      });\n\n      // eslint-disable-next-line no-shadow\n      for (const key of keys) {\n        const keyPath = Pointer.join(path, key);\n        const keyPathFromRoot = Pointer.join(pathFromRoot, key);\n        const value = obj[key];\n        if ($Ref.isAllowed$Ref(value)) {\n          inventory$Ref(obj, key, path, keyPathFromRoot, indirections, inventory, $refs, options);\n        } else {\n          crawl(obj, key, keyPath, keyPathFromRoot, indirections, inventory, $refs, options);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Inventories the given JSON Reference (i.e. records detailed information about it so we can\n * optimize all $refs in the schema), and then crawls the resolved value.\n *\n * @param {object} $refParent - The object that contains a JSON Reference as one of its keys\n * @param {string} $refKey - The key in `$refParent` that is a JSON Reference\n * @param {string} path - The full path of the JSON Reference at `$refKey`, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of the JSON Reference at `$refKey`, from the schema root\n * @param {object[]} inventory - An array of already-inventoried $ref pointers\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n */\nfunction inventory$Ref($refParent, $refKey, path, pathFromRoot, indirections, inventory, $refs, options) {\n  const $ref = $refKey === null ? $refParent : $refParent[$refKey];\n  const $refPath = url.resolve(path, $ref.$ref);\n  const pointer = $refs._resolve($refPath, pathFromRoot, options);\n  if (pointer === null) {\n    return;\n  }\n  const depth = Pointer.parse(pathFromRoot).length;\n  const file = url.stripHash(pointer.path);\n  const hash = url.getHash(pointer.path);\n  const external = file !== $refs._root$Ref.path;\n  const extended = $Ref.isExtended$Ref($ref);\n  indirections += pointer.indirections; // eslint-disable-line no-param-reassign\n\n  const existingEntry = findInInventory(inventory, $refParent, $refKey);\n  if (existingEntry) {\n    // This $Ref has already been inventoried, so we don't need to process it again\n    if (depth < existingEntry.depth || indirections < existingEntry.indirections) {\n      removeFromInventory(inventory, existingEntry);\n    } else {\n      return;\n    }\n  }\n  inventory.push({\n    $ref,\n    // The JSON Reference (e.g. {$ref: string})\n    parent: $refParent,\n    // The object that contains this $ref pointer\n    key: $refKey,\n    // The key in `parent` that is the $ref pointer\n    pathFromRoot,\n    // The path to the $ref pointer, from the JSON Schema root\n    depth,\n    // How far from the JSON Schema root is this $ref pointer?\n    file,\n    // The file that the $ref pointer resolves to\n    hash,\n    // The hash within `file` that the $ref pointer resolves to\n    value: pointer.value,\n    // The resolved value of the $ref pointer\n    circular: pointer.circular,\n    // Is this $ref pointer DIRECTLY circular? (i.e. it references itself)\n    extended,\n    // Does this $ref extend its resolved value? (i.e. it has extra properties, in addition to \"$ref\")\n    external,\n    // Does this $ref pointer point to a file other than the main JSON Schema file?\n    indirections // The number of indirect references that were traversed to resolve the value\n  });\n\n  // Recursively crawl the resolved value\n  if (!existingEntry) {\n    crawl(pointer.value, null, pointer.path, pathFromRoot, indirections + 1, inventory, $refs, options);\n  }\n}\n\n/**\n * Re-maps every $ref pointer, so that they're all relative to the root of the JSON Schema.\n * Each referenced value is dereferenced EXACTLY ONCE.  All subsequent references to the same\n * value are re-mapped to point to the first reference.\n *\n * @example:\n *  {\n *    first: { $ref: somefile.json#/some/part },\n *    second: { $ref: somefile.json#/another/part },\n *    third: { $ref: somefile.json },\n *    fourth: { $ref: somefile.json#/some/part/sub/part }\n *  }\n *\n * In this example, there are four references to the same file, but since the third reference points\n * to the ENTIRE file, that's the only one we need to dereference.  The other three can just be\n * remapped to point inside the third one.\n *\n * On the other hand, if the third reference DIDN'T exist, then the first and second would both need\n * to be dereferenced, since they point to different parts of the file. The fourth reference does NOT\n * need to be dereferenced, because it can be remapped to point inside the first one.\n *\n * @param {object[]} inventory\n */\nfunction remap(inventory) {\n  // Group & sort all the $ref pointers, so they're in the order that we need to dereference/remap them\n  inventory.sort((a, b) => {\n    if (a.file !== b.file) {\n      // Group all the $refs that point to the same file\n      return a.file < b.file ? -1 : +1;\n    } else if (a.hash !== b.hash) {\n      // Group all the $refs that point to the same part of the file\n      return a.hash < b.hash ? -1 : +1;\n    } else if (a.circular !== b.circular) {\n      // If the $ref points to itself, then sort it higher than other $refs that point to this $ref\n      return a.circular ? -1 : +1;\n    } else if (a.extended !== b.extended) {\n      // If the $ref extends the resolved value, then sort it lower than other $refs that don't extend the value\n      return a.extended ? +1 : -1;\n    } else if (a.indirections !== b.indirections) {\n      // Sort direct references higher than indirect references\n      return a.indirections - b.indirections;\n    } else if (a.depth !== b.depth) {\n      // Sort $refs by how close they are to the JSON Schema root\n      return a.depth - b.depth;\n    }\n\n    // Determine how far each $ref is from the \"definitions\" property.\n    // Most people will expect references to be bundled into the the \"definitions\" property if possible.\n    const aDefinitionsIndex = a.pathFromRoot.lastIndexOf('/definitions');\n    const bDefinitionsIndex = b.pathFromRoot.lastIndexOf('/definitions');\n    if (aDefinitionsIndex !== bDefinitionsIndex) {\n      // Give higher priority to the $ref that's closer to the \"definitions\" property\n      return bDefinitionsIndex - aDefinitionsIndex;\n    }\n\n    // All else is equal, so use the shorter path, which will produce the shortest possible reference\n    return a.pathFromRoot.length - b.pathFromRoot.length;\n  });\n  let file;\n  let hash;\n  let pathFromRoot;\n  for (const entry of inventory) {\n    // console.log('Re-mapping $ref pointer \"%s\" at %s', entry.$ref.$ref, entry.pathFromRoot);\n\n    if (!entry.external) {\n      // This $ref already resolves to the main JSON Schema file\n      entry.$ref.$ref = entry.hash;\n    } else if (entry.file === file && entry.hash === hash) {\n      // This $ref points to the same value as the prevous $ref, so remap it to the same path\n      entry.$ref.$ref = pathFromRoot;\n    } else if (entry.file === file && entry.hash.indexOf(`${hash}/`) === 0) {\n      // This $ref points to a sub-value of the prevous $ref, so remap it beneath that path\n      entry.$ref.$ref = Pointer.join(pathFromRoot, Pointer.parse(entry.hash.replace(hash, '#')));\n    } else {\n      // We've moved to a new file or new hash\n      file = entry.file;\n      hash = entry.hash;\n      pathFromRoot = entry.pathFromRoot;\n\n      // This is the first $ref to point to this value, so dereference the value.\n      // Any other $refs that point to the same value will point to this $ref instead\n      entry.parent[entry.key] = $Ref.dereference(entry.$ref, entry.value);\n      entry.$ref = entry.parent[entry.key];\n      if (entry.circular) {\n        // This $ref points to itself\n        entry.$ref.$ref = entry.pathFromRoot;\n      }\n    }\n\n    // console.log('    new value: %s', (entry.$ref && entry.$ref.$ref) ? entry.$ref.$ref : '[object Object]');\n  }\n}\n\n/**\n * TODO\n */\nfunction findInInventory(inventory, $refParent, $refKey) {\n  for (let i = 0; i < inventory.length; i++) {\n    const existingEntry = inventory[i];\n    if (existingEntry.parent === $refParent && existingEntry.key === $refKey) {\n      return existingEntry;\n    }\n  }\n}\nfunction removeFromInventory(inventory, entry) {\n  const index = inventory.indexOf(entry);\n  inventory.splice(index, 1);\n}","map":{"version":3,"names":["$Ref","require","Pointer","url","module","exports","bundle","parser","options","inventory","crawl","$refs","_root$Ref","path","remap","parent","key","pathFromRoot","indirections","obj","ArrayBuffer","isView","isAllowed$Ref","inventory$Ref","keys","Object","sort","a","b","length","keyPath","join","keyPathFromRoot","value","$refParent","$refKey","$ref","$refPath","resolve","pointer","_resolve","depth","parse","file","stripHash","hash","getHash","external","extended","isExtended$Ref","existingEntry","findInInventory","removeFromInventory","push","circular","aDefinitionsIndex","lastIndexOf","bDefinitionsIndex","entry","indexOf","replace","dereference","i","index","splice"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/server/.api/apis/aivideoapi/node_modules/@readme/json-schema-ref-parser/lib/bundle.js"],"sourcesContent":["/* eslint-disable import/order */\nconst $Ref = require('./ref');\nconst Pointer = require('./pointer');\nconst url = require('./util/url');\n\n/**\n * Bundles all external JSON references into the main JSON schema, thus resulting in a schema that\n * only has *internal* references, not any *external* references.\n * This method mutates the JSON schema object, adding new references and re-mapping existing ones.\n *\n * @param {$RefParser} parser\n * @param {$RefParserOptions} options\n */\nmodule.exports = function bundle(parser, options) {\n  // console.log('Bundling $ref pointers in %s', parser.$refs._root$Ref.path);\n\n  // Build an inventory of all $ref pointers in the JSON Schema\n  const inventory = [];\n  crawl(parser, 'schema', `${parser.$refs._root$Ref.path}#`, '#', 0, inventory, parser.$refs, options);\n\n  // Remap all $ref pointers\n  remap(inventory);\n};\n\n/**\n * Recursively crawls the given value, and inventories all JSON references.\n *\n * @param {object} parent - The object containing the value to crawl. If the value is not an object or array, it will be ignored.\n * @param {string} key - The property key of `parent` to be crawled\n * @param {string} path - The full path of the property being crawled, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of the property being crawled, from the schema root\n * @param {object[]} inventory - An array of already-inventoried $ref pointers\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n */\nfunction crawl(parent, key, path, pathFromRoot, indirections, inventory, $refs, options) {\n  const obj = key === null ? parent : parent[key];\n\n  if (obj && typeof obj === 'object' && !ArrayBuffer.isView(obj)) {\n    if ($Ref.isAllowed$Ref(obj)) {\n      inventory$Ref(parent, key, path, pathFromRoot, indirections, inventory, $refs, options);\n    } else {\n      // Crawl the object in a specific order that's optimized for bundling.\n      // This is important because it determines how `pathFromRoot` gets built,\n      // which later determines which keys get dereferenced and which ones get remapped\n      const keys = Object.keys(obj).sort((a, b) => {\n        // Most people will expect references to be bundled into the the \"definitions\" property,\n        // so we always crawl that property first, if it exists.\n        if (a === 'definitions') {\n          return -1;\n        } else if (b === 'definitions') {\n          return 1;\n        }\n\n        // Otherwise, crawl the keys based on their length.\n        // This produces the shortest possible bundled references\n        return a.length - b.length;\n      });\n\n      // eslint-disable-next-line no-shadow\n      for (const key of keys) {\n        const keyPath = Pointer.join(path, key);\n        const keyPathFromRoot = Pointer.join(pathFromRoot, key);\n        const value = obj[key];\n\n        if ($Ref.isAllowed$Ref(value)) {\n          inventory$Ref(obj, key, path, keyPathFromRoot, indirections, inventory, $refs, options);\n        } else {\n          crawl(obj, key, keyPath, keyPathFromRoot, indirections, inventory, $refs, options);\n        }\n      }\n    }\n  }\n}\n\n/**\n * Inventories the given JSON Reference (i.e. records detailed information about it so we can\n * optimize all $refs in the schema), and then crawls the resolved value.\n *\n * @param {object} $refParent - The object that contains a JSON Reference as one of its keys\n * @param {string} $refKey - The key in `$refParent` that is a JSON Reference\n * @param {string} path - The full path of the JSON Reference at `$refKey`, possibly with a JSON Pointer in the hash\n * @param {string} pathFromRoot - The path of the JSON Reference at `$refKey`, from the schema root\n * @param {object[]} inventory - An array of already-inventoried $ref pointers\n * @param {$Refs} $refs\n * @param {$RefParserOptions} options\n */\nfunction inventory$Ref($refParent, $refKey, path, pathFromRoot, indirections, inventory, $refs, options) {\n  const $ref = $refKey === null ? $refParent : $refParent[$refKey];\n  const $refPath = url.resolve(path, $ref.$ref);\n  const pointer = $refs._resolve($refPath, pathFromRoot, options);\n  if (pointer === null) {\n    return;\n  }\n\n  const depth = Pointer.parse(pathFromRoot).length;\n  const file = url.stripHash(pointer.path);\n  const hash = url.getHash(pointer.path);\n  const external = file !== $refs._root$Ref.path;\n  const extended = $Ref.isExtended$Ref($ref);\n  indirections += pointer.indirections; // eslint-disable-line no-param-reassign\n\n  const existingEntry = findInInventory(inventory, $refParent, $refKey);\n  if (existingEntry) {\n    // This $Ref has already been inventoried, so we don't need to process it again\n    if (depth < existingEntry.depth || indirections < existingEntry.indirections) {\n      removeFromInventory(inventory, existingEntry);\n    } else {\n      return;\n    }\n  }\n\n  inventory.push({\n    $ref, // The JSON Reference (e.g. {$ref: string})\n    parent: $refParent, // The object that contains this $ref pointer\n    key: $refKey, // The key in `parent` that is the $ref pointer\n    pathFromRoot, // The path to the $ref pointer, from the JSON Schema root\n    depth, // How far from the JSON Schema root is this $ref pointer?\n    file, // The file that the $ref pointer resolves to\n    hash, // The hash within `file` that the $ref pointer resolves to\n    value: pointer.value, // The resolved value of the $ref pointer\n    circular: pointer.circular, // Is this $ref pointer DIRECTLY circular? (i.e. it references itself)\n    extended, // Does this $ref extend its resolved value? (i.e. it has extra properties, in addition to \"$ref\")\n    external, // Does this $ref pointer point to a file other than the main JSON Schema file?\n    indirections, // The number of indirect references that were traversed to resolve the value\n  });\n\n  // Recursively crawl the resolved value\n  if (!existingEntry) {\n    crawl(pointer.value, null, pointer.path, pathFromRoot, indirections + 1, inventory, $refs, options);\n  }\n}\n\n/**\n * Re-maps every $ref pointer, so that they're all relative to the root of the JSON Schema.\n * Each referenced value is dereferenced EXACTLY ONCE.  All subsequent references to the same\n * value are re-mapped to point to the first reference.\n *\n * @example:\n *  {\n *    first: { $ref: somefile.json#/some/part },\n *    second: { $ref: somefile.json#/another/part },\n *    third: { $ref: somefile.json },\n *    fourth: { $ref: somefile.json#/some/part/sub/part }\n *  }\n *\n * In this example, there are four references to the same file, but since the third reference points\n * to the ENTIRE file, that's the only one we need to dereference.  The other three can just be\n * remapped to point inside the third one.\n *\n * On the other hand, if the third reference DIDN'T exist, then the first and second would both need\n * to be dereferenced, since they point to different parts of the file. The fourth reference does NOT\n * need to be dereferenced, because it can be remapped to point inside the first one.\n *\n * @param {object[]} inventory\n */\nfunction remap(inventory) {\n  // Group & sort all the $ref pointers, so they're in the order that we need to dereference/remap them\n  inventory.sort((a, b) => {\n    if (a.file !== b.file) {\n      // Group all the $refs that point to the same file\n      return a.file < b.file ? -1 : +1;\n    } else if (a.hash !== b.hash) {\n      // Group all the $refs that point to the same part of the file\n      return a.hash < b.hash ? -1 : +1;\n    } else if (a.circular !== b.circular) {\n      // If the $ref points to itself, then sort it higher than other $refs that point to this $ref\n      return a.circular ? -1 : +1;\n    } else if (a.extended !== b.extended) {\n      // If the $ref extends the resolved value, then sort it lower than other $refs that don't extend the value\n      return a.extended ? +1 : -1;\n    } else if (a.indirections !== b.indirections) {\n      // Sort direct references higher than indirect references\n      return a.indirections - b.indirections;\n    } else if (a.depth !== b.depth) {\n      // Sort $refs by how close they are to the JSON Schema root\n      return a.depth - b.depth;\n    }\n\n    // Determine how far each $ref is from the \"definitions\" property.\n    // Most people will expect references to be bundled into the the \"definitions\" property if possible.\n    const aDefinitionsIndex = a.pathFromRoot.lastIndexOf('/definitions');\n    const bDefinitionsIndex = b.pathFromRoot.lastIndexOf('/definitions');\n\n    if (aDefinitionsIndex !== bDefinitionsIndex) {\n      // Give higher priority to the $ref that's closer to the \"definitions\" property\n      return bDefinitionsIndex - aDefinitionsIndex;\n    }\n\n    // All else is equal, so use the shorter path, which will produce the shortest possible reference\n    return a.pathFromRoot.length - b.pathFromRoot.length;\n  });\n\n  let file;\n  let hash;\n  let pathFromRoot;\n  for (const entry of inventory) {\n    // console.log('Re-mapping $ref pointer \"%s\" at %s', entry.$ref.$ref, entry.pathFromRoot);\n\n    if (!entry.external) {\n      // This $ref already resolves to the main JSON Schema file\n      entry.$ref.$ref = entry.hash;\n    } else if (entry.file === file && entry.hash === hash) {\n      // This $ref points to the same value as the prevous $ref, so remap it to the same path\n      entry.$ref.$ref = pathFromRoot;\n    } else if (entry.file === file && entry.hash.indexOf(`${hash}/`) === 0) {\n      // This $ref points to a sub-value of the prevous $ref, so remap it beneath that path\n      entry.$ref.$ref = Pointer.join(pathFromRoot, Pointer.parse(entry.hash.replace(hash, '#')));\n    } else {\n      // We've moved to a new file or new hash\n      file = entry.file;\n      hash = entry.hash;\n      pathFromRoot = entry.pathFromRoot;\n\n      // This is the first $ref to point to this value, so dereference the value.\n      // Any other $refs that point to the same value will point to this $ref instead\n      entry.parent[entry.key] = $Ref.dereference(entry.$ref, entry.value);\n      entry.$ref = entry.parent[entry.key];\n\n      if (entry.circular) {\n        // This $ref points to itself\n        entry.$ref.$ref = entry.pathFromRoot;\n      }\n    }\n\n    // console.log('    new value: %s', (entry.$ref && entry.$ref.$ref) ? entry.$ref.$ref : '[object Object]');\n  }\n}\n\n/**\n * TODO\n */\nfunction findInInventory(inventory, $refParent, $refKey) {\n  for (let i = 0; i < inventory.length; i++) {\n    const existingEntry = inventory[i];\n    if (existingEntry.parent === $refParent && existingEntry.key === $refKey) {\n      return existingEntry;\n    }\n  }\n}\n\nfunction removeFromInventory(inventory, entry) {\n  const index = inventory.indexOf(entry);\n  inventory.splice(index, 1);\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}