{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.isSchema = exports.isOAS31 = exports.isRef = void 0;\n/**\n * @param check Data to determine if it contains a ReferenceObject (`$ref` pointer`).\n * @returns If the supplied data has a `$ref` pointer.\n */\nfunction isRef(check) {\n  return check.$ref !== undefined;\n}\nexports.isRef = isRef;\n/**\n * @param check API definition to determine if it's a 3.1 definition.\n * @returns If the definition is a 3.1 definition.\n */\nfunction isOAS31(check) {\n  return check.openapi === '3.1.0';\n}\nexports.isOAS31 = isOAS31;\n/**\n * @param check JSON Schema object to determine if it's a non-polymorphic schema.\n * @param isPolymorphicAllOfChild If this JSON Schema object is the child of a polymorphic `allOf`.\n * @returns If the JSON Schema object is a JSON Schema object.\n */\nfunction isSchema(check, isPolymorphicAllOfChild) {\n  if (isPolymorphicAllOfChild === void 0) {\n    isPolymorphicAllOfChild = false;\n  }\n  return check.type !== undefined || check.allOf !== undefined || check.anyOf !== undefined || check.oneOf !== undefined || isPolymorphicAllOfChild;\n}\nexports.isSchema = isSchema;","map":{"version":3,"names":["exports","__esModule","isSchema","isOAS31","isRef","check","$ref","undefined","openapi","isPolymorphicAllOfChild","type","allOf","anyOf","oneOf"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/oas/dist/rmoas.types.js"],"sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.isSchema = exports.isOAS31 = exports.isRef = void 0;\n/**\n * @param check Data to determine if it contains a ReferenceObject (`$ref` pointer`).\n * @returns If the supplied data has a `$ref` pointer.\n */\nfunction isRef(check) {\n    return check.$ref !== undefined;\n}\nexports.isRef = isRef;\n/**\n * @param check API definition to determine if it's a 3.1 definition.\n * @returns If the definition is a 3.1 definition.\n */\nfunction isOAS31(check) {\n    return check.openapi === '3.1.0';\n}\nexports.isOAS31 = isOAS31;\n/**\n * @param check JSON Schema object to determine if it's a non-polymorphic schema.\n * @param isPolymorphicAllOfChild If this JSON Schema object is the child of a polymorphic `allOf`.\n * @returns If the JSON Schema object is a JSON Schema object.\n */\nfunction isSchema(check, isPolymorphicAllOfChild) {\n    if (isPolymorphicAllOfChild === void 0) { isPolymorphicAllOfChild = false; }\n    return (check.type !== undefined ||\n        check.allOf !== undefined ||\n        check.anyOf !== undefined ||\n        check.oneOf !== undefined ||\n        isPolymorphicAllOfChild);\n}\nexports.isSchema = isSchema;\n"],"mappings":"AAAA,YAAY;;AACZA,OAAO,CAACC,UAAU,GAAG,IAAI;AACzBD,OAAO,CAACE,QAAQ,GAAGF,OAAO,CAACG,OAAO,GAAGH,OAAO,CAACI,KAAK,GAAG,KAAK,CAAC;AAC3D;AACA;AACA;AACA;AACA,SAASA,KAAKA,CAACC,KAAK,EAAE;EAClB,OAAOA,KAAK,CAACC,IAAI,KAAKC,SAAS;AACnC;AACAP,OAAO,CAACI,KAAK,GAAGA,KAAK;AACrB;AACA;AACA;AACA;AACA,SAASD,OAAOA,CAACE,KAAK,EAAE;EACpB,OAAOA,KAAK,CAACG,OAAO,KAAK,OAAO;AACpC;AACAR,OAAO,CAACG,OAAO,GAAGA,OAAO;AACzB;AACA;AACA;AACA;AACA;AACA,SAASD,QAAQA,CAACG,KAAK,EAAEI,uBAAuB,EAAE;EAC9C,IAAIA,uBAAuB,KAAK,KAAK,CAAC,EAAE;IAAEA,uBAAuB,GAAG,KAAK;EAAE;EAC3E,OAAQJ,KAAK,CAACK,IAAI,KAAKH,SAAS,IAC5BF,KAAK,CAACM,KAAK,KAAKJ,SAAS,IACzBF,KAAK,CAACO,KAAK,KAAKL,SAAS,IACzBF,KAAK,CAACQ,KAAK,KAAKN,SAAS,IACzBE,uBAAuB;AAC/B;AACAT,OAAO,CAACE,QAAQ,GAAGA,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}