{"ast":null,"code":"import { Decoder } from \"./Decoder.mjs\";\nimport { ensureAsyncIterable } from \"./utils/stream.mjs\";\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport async function decodeAsync(streamLike, options) {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeAsync(stream);\n}\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeArrayStream(streamLike, options) {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeArrayStream(stream);\n}\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream(streamLike, options) {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeStream(stream);\n}","map":{"version":3,"names":["Decoder","ensureAsyncIterable","decodeAsync","streamLike","options","stream","decoder","decodeArrayStream","decodeMultiStream","decodeStream"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/node_modules/@msgpack/msgpack/src/decodeAsync.ts"],"sourcesContent":["import { Decoder } from \"./Decoder.ts\";\nimport { ensureAsyncIterable } from \"./utils/stream.ts\";\nimport type { DecoderOptions } from \"./Decoder.ts\";\nimport type { ReadableStreamLike } from \"./utils/stream.ts\";\nimport type { SplitUndefined } from \"./context.ts\";\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport async function decodeAsync<ContextType = undefined>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): Promise<unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeAsync(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeArrayStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeArrayStream(stream);\n}\n\n/**\n * @throws {@link RangeError} if the buffer is incomplete, including the case where the buffer is empty.\n * @throws {@link DecodeError} if the buffer contains invalid data.\n */\nexport function decodeMultiStream<ContextType>(\n  streamLike: ReadableStreamLike<ArrayLike<number> | BufferSource>,\n  options?: DecoderOptions<SplitUndefined<ContextType>>,\n): AsyncGenerator<unknown, void, unknown> {\n  const stream = ensureAsyncIterable(streamLike);\n  const decoder = new Decoder(options);\n  return decoder.decodeStream(stream);\n}\n"],"mappings":"AAAA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,mBAAmB,QAAQ,oBAAoB;AAKxD;;;;AAIA,OAAO,eAAeC,WAAWA,CAC/BC,UAAgE,EAChEC,OAAqD;EAErD,MAAMC,MAAM,GAAGJ,mBAAmB,CAACE,UAAU,CAAC;EAC9C,MAAMG,OAAO,GAAG,IAAIN,OAAO,CAACI,OAAO,CAAC;EACpC,OAAOE,OAAO,CAACJ,WAAW,CAACG,MAAM,CAAC;AACpC;AAEA;;;;AAIA,OAAM,SAAUE,iBAAiBA,CAC/BJ,UAAgE,EAChEC,OAAqD;EAErD,MAAMC,MAAM,GAAGJ,mBAAmB,CAACE,UAAU,CAAC;EAC9C,MAAMG,OAAO,GAAG,IAAIN,OAAO,CAACI,OAAO,CAAC;EACpC,OAAOE,OAAO,CAACC,iBAAiB,CAACF,MAAM,CAAC;AAC1C;AAEA;;;;AAIA,OAAM,SAAUG,iBAAiBA,CAC/BL,UAAgE,EAChEC,OAAqD;EAErD,MAAMC,MAAM,GAAGJ,mBAAmB,CAACE,UAAU,CAAC;EAC9C,MAAMG,OAAO,GAAG,IAAIN,OAAO,CAACI,OAAO,CAAC;EACpC,OAAOE,OAAO,CAACG,YAAY,CAACJ,MAAM,CAAC;AACrC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}