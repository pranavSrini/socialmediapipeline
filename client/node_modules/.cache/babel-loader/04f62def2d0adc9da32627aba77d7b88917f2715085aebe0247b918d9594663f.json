{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nconst isFunction_1 = __importDefault(require(\"./isFunction\"));\nconst isAsyncIterable = value => (0, isFunction_1.default)(value[Symbol.asyncIterator]);\nasync function* readStream(readable) {\n  const reader = readable.getReader();\n  while (true) {\n    const {\n      done,\n      value\n    } = await reader.read();\n    if (done) {\n      break;\n    }\n    yield value;\n  }\n}\nconst getStreamIterator = source => {\n  if (isAsyncIterable(source)) {\n    return source;\n  }\n  if ((0, isFunction_1.default)(source.getReader)) {\n    return readStream(source);\n  }\n  throw new TypeError(\"Unsupported data source: Expected either ReadableStream or async iterable.\");\n};\nexports.default = getStreamIterator;","map":{"version":3,"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","isFunction_1","require","isAsyncIterable","default","Symbol","asyncIterator","readStream","readable","reader","getReader","done","read","getStreamIterator","source","TypeError"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/form-data-encoder/lib/cjs/util/getStreamIterator.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst isFunction_1 = __importDefault(require(\"./isFunction\"));\nconst isAsyncIterable = (value) => ((0, isFunction_1.default)(value[Symbol.asyncIterator]));\nasync function* readStream(readable) {\n    const reader = readable.getReader();\n    while (true) {\n        const { done, value } = await reader.read();\n        if (done) {\n            break;\n        }\n        yield value;\n    }\n}\nconst getStreamIterator = (source) => {\n    if (isAsyncIterable(source)) {\n        return source;\n    }\n    if ((0, isFunction_1.default)(source.getReader)) {\n        return readStream(source);\n    }\n    throw new TypeError(\"Unsupported data source: Expected either ReadableStream or async iterable.\");\n};\nexports.default = getStreamIterator;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,MAAM,CAACC,cAAc,CAACC,OAAO,EAAE,YAAY,EAAE;EAAEC,KAAK,EAAE;AAAK,CAAC,CAAC;AAC7D,MAAMC,YAAY,GAAGP,eAAe,CAACQ,OAAO,CAAC,cAAc,CAAC,CAAC;AAC7D,MAAMC,eAAe,GAAIH,KAAK,IAAM,CAAC,CAAC,EAAEC,YAAY,CAACG,OAAO,EAAEJ,KAAK,CAACK,MAAM,CAACC,aAAa,CAAC,CAAE;AAC3F,gBAAgBC,UAAUA,CAACC,QAAQ,EAAE;EACjC,MAAMC,MAAM,GAAGD,QAAQ,CAACE,SAAS,CAAC,CAAC;EACnC,OAAO,IAAI,EAAE;IACT,MAAM;MAAEC,IAAI;MAAEX;IAAM,CAAC,GAAG,MAAMS,MAAM,CAACG,IAAI,CAAC,CAAC;IAC3C,IAAID,IAAI,EAAE;MACN;IACJ;IACA,MAAMX,KAAK;EACf;AACJ;AACA,MAAMa,iBAAiB,GAAIC,MAAM,IAAK;EAClC,IAAIX,eAAe,CAACW,MAAM,CAAC,EAAE;IACzB,OAAOA,MAAM;EACjB;EACA,IAAI,CAAC,CAAC,EAAEb,YAAY,CAACG,OAAO,EAAEU,MAAM,CAACJ,SAAS,CAAC,EAAE;IAC7C,OAAOH,UAAU,CAACO,MAAM,CAAC;EAC7B;EACA,MAAM,IAAIC,SAAS,CAAC,4EAA4E,CAAC;AACrG,CAAC;AACDhB,OAAO,CAACK,OAAO,GAAGS,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}