{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.credentialsFromEnv = void 0;\nexports.resolveDefaultFetch = resolveDefaultFetch;\nexports.createConfig = createConfig;\nexports.getRestApiUrl = getRestApiUrl;\nconst middleware_1 = require(\"./middleware\");\nconst response_1 = require(\"./response\");\nconst runtime_1 = require(\"./runtime\");\nfunction resolveDefaultFetch() {\n  if (typeof fetch === \"undefined\") {\n    throw new Error(\"Your environment does not support fetch. Please provide your own fetch implementation.\");\n  }\n  return fetch;\n}\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */\nfunction hasEnvVariables() {\n  return typeof process !== \"undefined\" && process.env && (typeof process.env.FAL_KEY !== \"undefined\" || typeof process.env.FAL_KEY_ID !== \"undefined\" && typeof process.env.FAL_KEY_SECRET !== \"undefined\");\n}\nconst credentialsFromEnv = () => {\n  if (!hasEnvVariables()) {\n    return undefined;\n  }\n  if (typeof process.env.FAL_KEY !== \"undefined\") {\n    return process.env.FAL_KEY;\n  }\n  return process.env.FAL_KEY_ID ? `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}` : undefined;\n};\nexports.credentialsFromEnv = credentialsFromEnv;\nconst DEFAULT_CONFIG = {\n  credentials: exports.credentialsFromEnv,\n  suppressLocalCredentialsWarning: false,\n  requestMiddleware: request => Promise.resolve(request),\n  responseHandler: response_1.defaultResponseHandler\n};\n/**\n * Configures the fal client.\n *\n * @param config the new configuration.\n */\nfunction createConfig(config) {\n  var _a;\n  let configuration = Object.assign(Object.assign(Object.assign({}, DEFAULT_CONFIG), config), {\n    fetch: (_a = config.fetch) !== null && _a !== void 0 ? _a : resolveDefaultFetch()\n  });\n  if (config.proxyUrl) {\n    configuration = Object.assign(Object.assign({}, configuration), {\n      requestMiddleware: (0, middleware_1.withMiddleware)(configuration.requestMiddleware, (0, middleware_1.withProxy)({\n        targetUrl: config.proxyUrl\n      }))\n    });\n  }\n  const {\n    credentials: resolveCredentials,\n    suppressLocalCredentialsWarning\n  } = configuration;\n  const credentials = typeof resolveCredentials === \"function\" ? resolveCredentials() : resolveCredentials;\n  if ((0, runtime_1.isBrowser)() && credentials && !suppressLocalCredentialsWarning) {\n    console.warn(\"The fal credentials are exposed in the browser's environment. \" + \"That's not recommended for production use cases.\");\n  }\n  return configuration;\n}\n/**\n * @returns the URL of the fal REST api endpoint.\n */\nfunction getRestApiUrl() {\n  return \"https://rest.alpha.fal.ai\";\n}","map":{"version":3,"names":["exports","resolveDefaultFetch","createConfig","getRestApiUrl","middleware_1","require","response_1","runtime_1","fetch","Error","hasEnvVariables","process","env","FAL_KEY","FAL_KEY_ID","FAL_KEY_SECRET","credentialsFromEnv","undefined","DEFAULT_CONFIG","credentials","suppressLocalCredentialsWarning","requestMiddleware","request","Promise","resolve","responseHandler","defaultResponseHandler","config","configuration","Object","assign","_a","proxyUrl","withMiddleware","withProxy","targetUrl","resolveCredentials","isBrowser","console","warn"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/libs/client/src/config.ts"],"sourcesContent":["import {\n  withMiddleware,\n  withProxy,\n  type RequestMiddleware,\n} from \"./middleware\";\nimport type { ResponseHandler } from \"./response\";\nimport { defaultResponseHandler } from \"./response\";\nimport { isBrowser } from \"./runtime\";\n\nexport type CredentialsResolver = () => string | undefined;\n\ntype FetchType = typeof fetch;\n\nexport function resolveDefaultFetch(): FetchType {\n  if (typeof fetch === \"undefined\") {\n    throw new Error(\n      \"Your environment does not support fetch. Please provide your own fetch implementation.\",\n    );\n  }\n  return fetch;\n}\n\nexport type Config = {\n  /**\n   * The credentials to use for the fal client. When using the\n   * client in the browser, it's recommended to use a proxy server to avoid\n   * exposing the credentials in the client's environment.\n   *\n   * By default it tries to use the `FAL_KEY` environment variable, when\n   * `process.env` is defined.\n   *\n   * @see https://fal.ai/docs/model-endpoints/server-side\n   * @see #suppressLocalCredentialsWarning\n   */\n  credentials?: undefined | string | CredentialsResolver;\n  /**\n   * Suppresses the warning when the fal credentials are exposed in the\n   * browser's environment. Make sure you understand the security implications\n   * before enabling this option.\n   */\n  suppressLocalCredentialsWarning?: boolean;\n  /**\n   * The URL of the proxy server to use for the client requests. The proxy\n   * server should forward the requests to the fal api.\n   */\n  proxyUrl?: string;\n  /**\n   * The request middleware to use for the client requests. By default it\n   * doesn't apply any middleware.\n   */\n  requestMiddleware?: RequestMiddleware;\n  /**\n   * The response handler to use for the client requests. By default it uses\n   * a built-in response handler that returns the JSON response.\n   */\n  responseHandler?: ResponseHandler<any>;\n  /**\n   * The fetch implementation to use for the client requests. By default it uses\n   * the global `fetch` function.\n   */\n  fetch?: FetchType;\n};\n\nexport type RequiredConfig = Required<Config>;\n\n/**\n * Checks if the required FAL environment variables are set.\n *\n * @returns `true` if the required environment variables are set,\n * `false` otherwise.\n */\nfunction hasEnvVariables(): boolean {\n  return (\n    typeof process !== \"undefined\" &&\n    process.env &&\n    (typeof process.env.FAL_KEY !== \"undefined\" ||\n      (typeof process.env.FAL_KEY_ID !== \"undefined\" &&\n        typeof process.env.FAL_KEY_SECRET !== \"undefined\"))\n  );\n}\n\nexport const credentialsFromEnv: CredentialsResolver = () => {\n  if (!hasEnvVariables()) {\n    return undefined;\n  }\n\n  if (typeof process.env.FAL_KEY !== \"undefined\") {\n    return process.env.FAL_KEY;\n  }\n\n  return process.env.FAL_KEY_ID\n    ? `${process.env.FAL_KEY_ID}:${process.env.FAL_KEY_SECRET}`\n    : undefined;\n};\n\nconst DEFAULT_CONFIG: Partial<Config> = {\n  credentials: credentialsFromEnv,\n  suppressLocalCredentialsWarning: false,\n  requestMiddleware: (request) => Promise.resolve(request),\n  responseHandler: defaultResponseHandler,\n};\n\n/**\n * Configures the fal client.\n *\n * @param config the new configuration.\n */\nexport function createConfig(config: Config): RequiredConfig {\n  let configuration = {\n    ...DEFAULT_CONFIG,\n    ...config,\n    fetch: config.fetch ?? resolveDefaultFetch(),\n  } as RequiredConfig;\n  if (config.proxyUrl) {\n    configuration = {\n      ...configuration,\n      requestMiddleware: withMiddleware(\n        configuration.requestMiddleware,\n        withProxy({ targetUrl: config.proxyUrl }),\n      ),\n    };\n  }\n  const { credentials: resolveCredentials, suppressLocalCredentialsWarning } =\n    configuration;\n  const credentials =\n    typeof resolveCredentials === \"function\"\n      ? resolveCredentials()\n      : resolveCredentials;\n  if (isBrowser() && credentials && !suppressLocalCredentialsWarning) {\n    console.warn(\n      \"The fal credentials are exposed in the browser's environment. \" +\n        \"That's not recommended for production use cases.\",\n    );\n  }\n  return configuration;\n}\n\n/**\n * @returns the URL of the fal REST api endpoint.\n */\nexport function getRestApiUrl(): string {\n  return \"https://rest.alpha.fal.ai\";\n}\n"],"mappings":";;;;;;AAaAA,OAAA,CAAAC,mBAAA,GAAAA,mBAAA;AA8FAD,OAAA,CAAAE,YAAA,GAAAA,YAAA;AAiCAF,OAAA,CAAAG,aAAA,GAAAA,aAAA;AA5IA,MAAAC,YAAA,GAAAC,OAAA;AAMA,MAAAC,UAAA,GAAAD,OAAA;AACA,MAAAE,SAAA,GAAAF,OAAA;AAMA,SAAgBJ,mBAAmBA,CAAA;EACjC,IAAI,OAAOO,KAAK,KAAK,WAAW,EAAE;IAChC,MAAM,IAAIC,KAAK,CACb,wFAAwF,CACzF;EACH;EACA,OAAOD,KAAK;AACd;AA6CA;;;;;;AAMA,SAASE,eAAeA,CAAA;EACtB,OACE,OAAOC,OAAO,KAAK,WAAW,IAC9BA,OAAO,CAACC,GAAG,KACV,OAAOD,OAAO,CAACC,GAAG,CAACC,OAAO,KAAK,WAAW,IACxC,OAAOF,OAAO,CAACC,GAAG,CAACE,UAAU,KAAK,WAAW,IAC5C,OAAOH,OAAO,CAACC,GAAG,CAACG,cAAc,KAAK,WAAY,CAAC;AAE3D;AAEO,MAAMC,kBAAkB,GAAwBA,CAAA,KAAK;EAC1D,IAAI,CAACN,eAAe,EAAE,EAAE;IACtB,OAAOO,SAAS;EAClB;EAEA,IAAI,OAAON,OAAO,CAACC,GAAG,CAACC,OAAO,KAAK,WAAW,EAAE;IAC9C,OAAOF,OAAO,CAACC,GAAG,CAACC,OAAO;EAC5B;EAEA,OAAOF,OAAO,CAACC,GAAG,CAACE,UAAU,GACzB,GAAGH,OAAO,CAACC,GAAG,CAACE,UAAU,IAAIH,OAAO,CAACC,GAAG,CAACG,cAAc,EAAE,GACzDE,SAAS;AACf,CAAC;AAZYjB,OAAA,CAAAgB,kBAAkB,GAAAA,kBAAA;AAc/B,MAAME,cAAc,GAAoB;EACtCC,WAAW,EAAEnB,OAAA,CAAAgB,kBAAkB;EAC/BI,+BAA+B,EAAE,KAAK;EACtCC,iBAAiB,EAAGC,OAAO,IAAKC,OAAO,CAACC,OAAO,CAACF,OAAO,CAAC;EACxDG,eAAe,EAAEnB,UAAA,CAAAoB;CAClB;AAED;;;;;AAKA,SAAgBxB,YAAYA,CAACyB,MAAc;;EACzC,IAAIC,aAAa,GAAGC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACfZ,cAAc,GACdS,MAAM;IACTnB,KAAK,EAAE,CAAAuB,EAAA,GAAAJ,MAAM,CAACnB,KAAK,cAAAuB,EAAA,cAAAA,EAAA,GAAI9B,mBAAmB;EAAE,EAC3B;EACnB,IAAI0B,MAAM,CAACK,QAAQ,EAAE;IACnBJ,aAAa,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KACRF,aAAa;MAChBP,iBAAiB,EAAE,IAAAjB,YAAA,CAAA6B,cAAc,EAC/BL,aAAa,CAACP,iBAAiB,EAC/B,IAAAjB,YAAA,CAAA8B,SAAS,EAAC;QAAEC,SAAS,EAAER,MAAM,CAACK;MAAQ,CAAE,CAAC;IAC1C,EACF;EACH;EACA,MAAM;IAAEb,WAAW,EAAEiB,kBAAkB;IAAEhB;EAA+B,CAAE,GACxEQ,aAAa;EACf,MAAMT,WAAW,GACf,OAAOiB,kBAAkB,KAAK,UAAU,GACpCA,kBAAkB,EAAE,GACpBA,kBAAkB;EACxB,IAAI,IAAA7B,SAAA,CAAA8B,SAAS,GAAE,IAAIlB,WAAW,IAAI,CAACC,+BAA+B,EAAE;IAClEkB,OAAO,CAACC,IAAI,CACV,gEAAgE,GAC9D,kDAAkD,CACrD;EACH;EACA,OAAOX,aAAa;AACtB;AAEA;;;AAGA,SAAgBzB,aAAaA,CAAA;EAC3B,OAAO,2BAA2B;AACpC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}