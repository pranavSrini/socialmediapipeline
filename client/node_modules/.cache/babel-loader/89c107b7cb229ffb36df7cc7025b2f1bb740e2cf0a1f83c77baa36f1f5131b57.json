{"ast":null,"code":"'use strict';\n\n// MODULES //\nvar gcd = require('compute-gcd'),\n  isArray = require('validate.io-array'),\n  isIntegerArray = require('validate.io-integer-array'),\n  isFunction = require('validate.io-function');\n\n// LEAST COMMON MULTIPLE //\n\n/**\n* FUNCTION: lcm( arr[, clbk] )\n*\tComputes the least common multiple (lcm).\n*\n* @param {Number[]|Number} arr - input array of integers\n* @param {Function|Number} [accessor] - accessor function for accessing array values\n* @returns {Number|Null} least common multiple or null\n*/\nfunction lcm() {\n  var nargs = arguments.length,\n    args,\n    clbk,\n    arr,\n    len,\n    a,\n    b,\n    i;\n\n  // Copy the input arguments to an array...\n  args = new Array(nargs);\n  for (i = 0; i < nargs; i++) {\n    args[i] = arguments[i];\n  }\n  // Have we been provided with integer arguments?\n  if (isIntegerArray(args)) {\n    if (nargs === 2) {\n      a = args[0];\n      b = args[1];\n      if (a < 0) {\n        a = -a;\n      }\n      if (b < 0) {\n        b = -b;\n      }\n      if (a === 0 || b === 0) {\n        return 0;\n      }\n      return a / gcd(a, b) * b;\n    }\n    arr = args;\n  }\n  // If not integers, ensure that the first argument is an array...\n  else if (!isArray(args[0])) {\n    throw new TypeError('lcm()::invalid input argument. Must provide an array of integers. Value: `' + args[0] + '`.');\n  }\n  // Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...\n  else if (nargs > 1) {\n    arr = args[0];\n    clbk = args[1];\n    if (!isFunction(clbk)) {\n      throw new TypeError('lcm()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.');\n    }\n  }\n  // We have been provided an array...\n  else {\n    arr = args[0];\n  }\n  len = arr.length;\n\n  // Check if a sufficient number of values have been provided...\n  if (len < 2) {\n    return null;\n  }\n  // If an accessor is provided, extract the array values...\n  if (clbk) {\n    a = new Array(len);\n    for (i = 0; i < len; i++) {\n      a[i] = clbk(arr[i], i);\n    }\n    arr = a;\n  }\n  // Given an input array, ensure all array values are integers...\n  if (nargs < 3) {\n    if (!isIntegerArray(arr)) {\n      throw new TypeError('lcm()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.');\n    }\n  }\n  // Convert any negative integers to positive integers...\n  for (i = 0; i < len; i++) {\n    a = arr[i];\n    if (a < 0) {\n      arr[i] = -a;\n    }\n  }\n  // Exploit the fact that the lcm is an associative function...\n  a = arr[0];\n  for (i = 1; i < len; i++) {\n    b = arr[i];\n    if (a === 0 || b === 0) {\n      return 0;\n    }\n    a = a / gcd(a, b) * b;\n  }\n  return a;\n} // end FUNCTION lcm()\n\n// EXPORTS //\n\nmodule.exports = lcm;","map":{"version":3,"names":["gcd","require","isArray","isIntegerArray","isFunction","lcm","nargs","arguments","length","args","clbk","arr","len","a","b","i","Array","TypeError","module","exports"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/compute-lcm/lib/index.js"],"sourcesContent":["'use strict';\n\n// MODULES //\n\nvar gcd = require( 'compute-gcd' ),\n\tisArray = require( 'validate.io-array' ),\n\tisIntegerArray = require( 'validate.io-integer-array' ),\n\tisFunction = require( 'validate.io-function' );\n\n\n// LEAST COMMON MULTIPLE //\n\n/**\n* FUNCTION: lcm( arr[, clbk] )\n*\tComputes the least common multiple (lcm).\n*\n* @param {Number[]|Number} arr - input array of integers\n* @param {Function|Number} [accessor] - accessor function for accessing array values\n* @returns {Number|Null} least common multiple or null\n*/\nfunction lcm() {\n\tvar nargs = arguments.length,\n\t\targs,\n\t\tclbk,\n\t\tarr,\n\t\tlen,\n\t\ta, b,\n\t\ti;\n\n\t// Copy the input arguments to an array...\n\targs = new Array( nargs );\n\tfor ( i = 0; i < nargs; i++ ) {\n\t\targs[ i ] = arguments[ i ];\n\t}\n\t// Have we been provided with integer arguments?\n\tif ( isIntegerArray( args ) ) {\n\t\tif ( nargs === 2 ) {\n\t\t\ta = args[ 0 ];\n\t\t\tb = args[ 1 ];\n\t\t\tif ( a < 0 ) {\n\t\t\t\ta = -a;\n\t\t\t}\n\t\t\tif ( b < 0 ) {\n\t\t\t\tb = -b;\n\t\t\t}\n\t\t\tif ( a === 0 || b === 0 ) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\treturn ( a/gcd(a,b) ) * b;\n\t\t}\n\t\tarr = args;\n\t}\n\t// If not integers, ensure that the first argument is an array...\n\telse if ( !isArray( args[ 0 ] ) ) {\n\t\tthrow new TypeError( 'lcm()::invalid input argument. Must provide an array of integers. Value: `' + args[ 0 ] + '`.' );\n\t}\n\t// Have we been provided with more than one argument? If so, ensure that the accessor argument is a function...\n\telse if ( nargs > 1 ) {\n\t\tarr = args[ 0 ];\n\t\tclbk = args[ 1 ];\n\t\tif ( !isFunction( clbk ) ) {\n\t\t\tthrow new TypeError( 'lcm()::invalid input argument. Accessor must be a function. Value: `' + clbk + '`.' );\n\t\t}\n\t}\n\t// We have been provided an array...\n\telse {\n\t\tarr = args[ 0 ];\n\t}\n\tlen = arr.length;\n\n\t// Check if a sufficient number of values have been provided...\n\tif ( len < 2 ) {\n\t\treturn null;\n\t}\n\t// If an accessor is provided, extract the array values...\n\tif ( clbk ) {\n\t\ta = new Array( len );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\ta[ i ] = clbk( arr[ i ], i );\n\t\t}\n\t\tarr = a;\n\t}\n\t// Given an input array, ensure all array values are integers...\n\tif ( nargs < 3 ) {\n\t\tif ( !isIntegerArray( arr ) ) {\n\t\t\tthrow new TypeError( 'lcm()::invalid input argument. Accessed array values must be integers. Value: `' + arr + '`.' );\n\t\t}\n\t}\n\t// Convert any negative integers to positive integers...\n\tfor ( i = 0; i < len; i++ ) {\n\t\ta = arr[ i ];\n\t\tif ( a < 0 ) {\n\t\t\tarr[ i ] = -a;\n\t\t}\n\t}\n\t// Exploit the fact that the lcm is an associative function...\n\ta = arr[ 0 ];\n\tfor ( i = 1; i < len; i++ ) {\n\t\tb = arr[ i ];\n\t\tif ( a === 0 || b === 0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\ta = ( a/gcd(a,b) ) * b;\n\t}\n\treturn a;\n} // end FUNCTION lcm()\n\n\n// EXPORTS //\n\nmodule.exports = lcm;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}