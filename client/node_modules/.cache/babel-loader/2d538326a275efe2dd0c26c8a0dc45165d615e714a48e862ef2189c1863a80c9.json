{"ast":null,"code":"const Options = require('./options');\n\n/**\n * Normalizes the given arguments, accounting for optional args.\n *\n * @param {Arguments} args\n * @returns {object}\n */\nmodule.exports = function normalizeArgs(args) {\n  let path;\n  let schema;\n  let options;\n  let callback;\n\n  // eslint-disable-next-line no-param-reassign\n  args = Array.prototype.slice.call(args);\n  if (typeof args[args.length - 1] === 'function') {\n    // The last parameter is a callback function\n    callback = args.pop();\n  }\n  if (typeof args[0] === 'string') {\n    // The first parameter is the path\n    path = args[0];\n    if (typeof args[2] === 'object') {\n      // The second parameter is the schema, and the third parameter is the options\n      schema = args[1];\n      options = args[2];\n    } else {\n      // The second parameter is the options\n      schema = undefined;\n      options = args[1];\n    }\n  } else {\n    // The first parameter is the schema\n    path = '';\n    schema = args[0];\n    options = args[1];\n  }\n  if (!(options instanceof Options)) {\n    options = new Options(options);\n  }\n  return {\n    path,\n    schema,\n    options,\n    callback\n  };\n};","map":{"version":3,"names":["Options","require","module","exports","normalizeArgs","args","path","schema","options","callback","Array","prototype","slice","call","length","pop","undefined"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/@readme/json-schema-ref-parser/lib/normalize-args.js"],"sourcesContent":["const Options = require('./options');\n\n/**\n * Normalizes the given arguments, accounting for optional args.\n *\n * @param {Arguments} args\n * @returns {object}\n */\nmodule.exports = function normalizeArgs(args) {\n  let path;\n  let schema;\n  let options;\n  let callback;\n\n  // eslint-disable-next-line no-param-reassign\n  args = Array.prototype.slice.call(args);\n\n  if (typeof args[args.length - 1] === 'function') {\n    // The last parameter is a callback function\n    callback = args.pop();\n  }\n\n  if (typeof args[0] === 'string') {\n    // The first parameter is the path\n    path = args[0];\n    if (typeof args[2] === 'object') {\n      // The second parameter is the schema, and the third parameter is the options\n      schema = args[1];\n      options = args[2];\n    } else {\n      // The second parameter is the options\n      schema = undefined;\n      options = args[1];\n    }\n  } else {\n    // The first parameter is the schema\n    path = '';\n    schema = args[0];\n    options = args[1];\n  }\n\n  if (!(options instanceof Options)) {\n    options = new Options(options);\n  }\n\n  return {\n    path,\n    schema,\n    options,\n    callback,\n  };\n};\n"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,WAAW,CAAC;;AAEpC;AACA;AACA;AACA;AACA;AACA;AACAC,MAAM,CAACC,OAAO,GAAG,SAASC,aAAaA,CAACC,IAAI,EAAE;EAC5C,IAAIC,IAAI;EACR,IAAIC,MAAM;EACV,IAAIC,OAAO;EACX,IAAIC,QAAQ;;EAEZ;EACAJ,IAAI,GAAGK,KAAK,CAACC,SAAS,CAACC,KAAK,CAACC,IAAI,CAACR,IAAI,CAAC;EAEvC,IAAI,OAAOA,IAAI,CAACA,IAAI,CAACS,MAAM,GAAG,CAAC,CAAC,KAAK,UAAU,EAAE;IAC/C;IACAL,QAAQ,GAAGJ,IAAI,CAACU,GAAG,CAAC,CAAC;EACvB;EAEA,IAAI,OAAOV,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;IAC/B;IACAC,IAAI,GAAGD,IAAI,CAAC,CAAC,CAAC;IACd,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,EAAE;MAC/B;MACAE,MAAM,GAAGF,IAAI,CAAC,CAAC,CAAC;MAChBG,OAAO,GAAGH,IAAI,CAAC,CAAC,CAAC;IACnB,CAAC,MAAM;MACL;MACAE,MAAM,GAAGS,SAAS;MAClBR,OAAO,GAAGH,IAAI,CAAC,CAAC,CAAC;IACnB;EACF,CAAC,MAAM;IACL;IACAC,IAAI,GAAG,EAAE;IACTC,MAAM,GAAGF,IAAI,CAAC,CAAC,CAAC;IAChBG,OAAO,GAAGH,IAAI,CAAC,CAAC,CAAC;EACnB;EAEA,IAAI,EAAEG,OAAO,YAAYR,OAAO,CAAC,EAAE;IACjCQ,OAAO,GAAG,IAAIR,OAAO,CAACQ,OAAO,CAAC;EAChC;EAEA,OAAO;IACLF,IAAI;IACJC,MAAM;IACNC,OAAO;IACPC;EACF,CAAC;AACH,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}