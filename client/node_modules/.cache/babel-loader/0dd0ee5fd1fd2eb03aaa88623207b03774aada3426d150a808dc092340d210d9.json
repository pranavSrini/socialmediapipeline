{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ValidationError = exports.ApiError = void 0;\nexports.defaultResponseHandler = defaultResponseHandler;\nexports.resultResponseHandler = resultResponseHandler;\nconst REQUEST_ID_HEADER = \"x-fal-request-id\";\nclass ApiError extends Error {\n  constructor({\n    message,\n    status,\n    body\n  }) {\n    super(message);\n    this.name = \"ApiError\";\n    this.status = status;\n    this.body = body;\n  }\n}\nexports.ApiError = ApiError;\nclass ValidationError extends ApiError {\n  constructor(args) {\n    super(args);\n    this.name = \"ValidationError\";\n  }\n  get fieldErrors() {\n    // NOTE: this is a hack to support both FastAPI/Pydantic errors\n    // and some custom 422 errors that might not be in the Pydantic format.\n    if (typeof this.body.detail === \"string\") {\n      return [{\n        loc: [\"body\"],\n        msg: this.body.detail,\n        type: \"value_error\"\n      }];\n    }\n    return this.body.detail || [];\n  }\n  getFieldErrors(field) {\n    return this.fieldErrors.filter(error => error.loc[error.loc.length - 1] === field);\n  }\n}\nexports.ValidationError = ValidationError;\nfunction defaultResponseHandler(response) {\n  return __awaiter(this, void 0, void 0, function* () {\n    var _a;\n    const {\n      status,\n      statusText\n    } = response;\n    const contentType = (_a = response.headers.get(\"Content-Type\")) !== null && _a !== void 0 ? _a : \"\";\n    if (!response.ok) {\n      if (contentType.includes(\"application/json\")) {\n        const body = yield response.json();\n        const ErrorType = status === 422 ? ValidationError : ApiError;\n        throw new ErrorType({\n          message: body.message || statusText,\n          status,\n          body\n        });\n      }\n      throw new ApiError({\n        message: `HTTP ${status}: ${statusText}`,\n        status\n      });\n    }\n    if (contentType.includes(\"application/json\")) {\n      return response.json();\n    }\n    if (contentType.includes(\"text/html\")) {\n      return response.text();\n    }\n    if (contentType.includes(\"application/octet-stream\")) {\n      return response.arrayBuffer();\n    }\n    // TODO convert to either number or bool automatically\n    return response.text();\n  });\n}\nfunction resultResponseHandler(response) {\n  return __awaiter(this, void 0, void 0, function* () {\n    const data = yield defaultResponseHandler(response);\n    return {\n      data,\n      requestId: response.headers.get(REQUEST_ID_HEADER) || \"\"\n    };\n  });\n}","map":{"version":3,"names":["exports","defaultResponseHandler","resultResponseHandler","REQUEST_ID_HEADER","ApiError","Error","constructor","message","status","body","name","ValidationError","args","fieldErrors","detail","loc","msg","type","getFieldErrors","field","filter","error","length","response","statusText","contentType","_a","headers","get","ok","includes","json","ErrorType","text","arrayBuffer","data","requestId"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/libs/client/src/response.ts"],"sourcesContent":["import { RequiredConfig } from \"./config\";\nimport { Result, ValidationErrorInfo } from \"./types/common\";\n\nexport type ResponseHandler<Output> = (response: Response) => Promise<Output>;\n\nconst REQUEST_ID_HEADER = \"x-fal-request-id\";\n\nexport type ResponseHandlerCreator<Output> = (\n  config: RequiredConfig,\n) => ResponseHandler<Output>;\n\ntype ApiErrorArgs = {\n  message: string;\n  status: number;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  body?: any;\n};\n\nexport class ApiError<Body> extends Error {\n  public readonly status: number;\n  public readonly body: Body;\n  constructor({ message, status, body }: ApiErrorArgs) {\n    super(message);\n    this.name = \"ApiError\";\n    this.status = status;\n    this.body = body;\n  }\n}\n\ntype ValidationErrorBody = {\n  detail: ValidationErrorInfo[];\n};\n\nexport class ValidationError extends ApiError<ValidationErrorBody> {\n  constructor(args: ApiErrorArgs) {\n    super(args);\n    this.name = \"ValidationError\";\n  }\n\n  get fieldErrors(): ValidationErrorInfo[] {\n    // NOTE: this is a hack to support both FastAPI/Pydantic errors\n    // and some custom 422 errors that might not be in the Pydantic format.\n    if (typeof this.body.detail === \"string\") {\n      return [\n        {\n          loc: [\"body\"],\n          msg: this.body.detail,\n          type: \"value_error\",\n        },\n      ];\n    }\n    return this.body.detail || [];\n  }\n\n  getFieldErrors(field: string): ValidationErrorInfo[] {\n    return this.fieldErrors.filter(\n      (error) => error.loc[error.loc.length - 1] === field,\n    );\n  }\n}\n\nexport async function defaultResponseHandler<Output>(\n  response: Response,\n): Promise<Output> {\n  const { status, statusText } = response;\n  const contentType = response.headers.get(\"Content-Type\") ?? \"\";\n  if (!response.ok) {\n    if (contentType.includes(\"application/json\")) {\n      const body = await response.json();\n      const ErrorType = status === 422 ? ValidationError : ApiError;\n      throw new ErrorType({\n        message: body.message || statusText,\n        status,\n        body,\n      });\n    }\n    throw new ApiError({ message: `HTTP ${status}: ${statusText}`, status });\n  }\n  if (contentType.includes(\"application/json\")) {\n    return response.json() as Promise<Output>;\n  }\n  if (contentType.includes(\"text/html\")) {\n    return response.text() as Promise<Output>;\n  }\n  if (contentType.includes(\"application/octet-stream\")) {\n    return response.arrayBuffer() as Promise<Output>;\n  }\n  // TODO convert to either number or bool automatically\n  return response.text() as Promise<Output>;\n}\n\nexport async function resultResponseHandler<Output>(\n  response: Response,\n): Promise<Result<Output>> {\n  const data = await defaultResponseHandler<Output>(response);\n  return {\n    data,\n    requestId: response.headers.get(REQUEST_ID_HEADER) || \"\",\n  } satisfies Result<Output>;\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6DAA,OAAA,CAAAC,sBAAA,GAAAA,sBAAA;AA8BAD,OAAA,CAAAE,qBAAA,GAAAA,qBAAA;AAtFA,MAAMC,iBAAiB,GAAG,kBAAkB;AAa5C,MAAaC,QAAe,SAAQC,KAAK;EAGvCC,YAAY;IAAEC,OAAO;IAAEC,MAAM;IAAEC;EAAI,CAAgB;IACjD,KAAK,CAACF,OAAO,CAAC;IACd,IAAI,CAACG,IAAI,GAAG,UAAU;IACtB,IAAI,CAACF,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,IAAI,GAAGA,IAAI;EAClB;;AARFT,OAAA,CAAAI,QAAA,GAAAA,QAAA;AAeA,MAAaO,eAAgB,SAAQP,QAA6B;EAChEE,YAAYM,IAAkB;IAC5B,KAAK,CAACA,IAAI,CAAC;IACX,IAAI,CAACF,IAAI,GAAG,iBAAiB;EAC/B;EAEA,IAAIG,WAAWA,CAAA;IACb;IACA;IACA,IAAI,OAAO,IAAI,CAACJ,IAAI,CAACK,MAAM,KAAK,QAAQ,EAAE;MACxC,OAAO,CACL;QACEC,GAAG,EAAE,CAAC,MAAM,CAAC;QACbC,GAAG,EAAE,IAAI,CAACP,IAAI,CAACK,MAAM;QACrBG,IAAI,EAAE;OACP,CACF;IACH;IACA,OAAO,IAAI,CAACR,IAAI,CAACK,MAAM,IAAI,EAAE;EAC/B;EAEAI,cAAcA,CAACC,KAAa;IAC1B,OAAO,IAAI,CAACN,WAAW,CAACO,MAAM,CAC3BC,KAAK,IAAKA,KAAK,CAACN,GAAG,CAACM,KAAK,CAACN,GAAG,CAACO,MAAM,GAAG,CAAC,CAAC,KAAKH,KAAK,CACrD;EACH;;AAzBFnB,OAAA,CAAAW,eAAA,GAAAA,eAAA;AA4BA,SAAsBV,sBAAsBA,CAC1CsB,QAAkB;;;IAElB,MAAM;MAAEf,MAAM;MAAEgB;IAAU,CAAE,GAAGD,QAAQ;IACvC,MAAME,WAAW,GAAG,CAAAC,EAAA,GAAAH,QAAQ,CAACI,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,cAAAF,EAAA,cAAAA,EAAA,GAAI,EAAE;IAC9D,IAAI,CAACH,QAAQ,CAACM,EAAE,EAAE;MAChB,IAAIJ,WAAW,CAACK,QAAQ,CAAC,kBAAkB,CAAC,EAAE;QAC5C,MAAMrB,IAAI,GAAG,MAAMc,QAAQ,CAACQ,IAAI,EAAE;QAClC,MAAMC,SAAS,GAAGxB,MAAM,KAAK,GAAG,GAAGG,eAAe,GAAGP,QAAQ;QAC7D,MAAM,IAAI4B,SAAS,CAAC;UAClBzB,OAAO,EAAEE,IAAI,CAACF,OAAO,IAAIiB,UAAU;UACnChB,MAAM;UACNC;SACD,CAAC;MACJ;MACA,MAAM,IAAIL,QAAQ,CAAC;QAAEG,OAAO,EAAE,QAAQC,MAAM,KAAKgB,UAAU,EAAE;QAAEhB;MAAM,CAAE,CAAC;IAC1E;IACA,IAAIiB,WAAW,CAACK,QAAQ,CAAC,kBAAkB,CAAC,EAAE;MAC5C,OAAOP,QAAQ,CAACQ,IAAI,EAAqB;IAC3C;IACA,IAAIN,WAAW,CAACK,QAAQ,CAAC,WAAW,CAAC,EAAE;MACrC,OAAOP,QAAQ,CAACU,IAAI,EAAqB;IAC3C;IACA,IAAIR,WAAW,CAACK,QAAQ,CAAC,0BAA0B,CAAC,EAAE;MACpD,OAAOP,QAAQ,CAACW,WAAW,EAAqB;IAClD;IACA;IACA,OAAOX,QAAQ,CAACU,IAAI,EAAqB;EAC3C,CAAC;;AAED,SAAsB/B,qBAAqBA,CACzCqB,QAAkB;;IAElB,MAAMY,IAAI,GAAG,MAAMlC,sBAAsB,CAASsB,QAAQ,CAAC;IAC3D,OAAO;MACLY,IAAI;MACJC,SAAS,EAAEb,QAAQ,CAACI,OAAO,CAACC,GAAG,CAACzB,iBAAiB,CAAC,IAAI;KAC9B;EAC5B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}