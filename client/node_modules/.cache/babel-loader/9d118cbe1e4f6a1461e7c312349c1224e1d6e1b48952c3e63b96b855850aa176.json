{"ast":null,"code":"import { addInspectMethod } from \"./isomorphic.node\";\nimport { isLazyStack, isWritableStack, joinStacks, lazyJoinStacks } from \"./stack\";\nimport { getDeepKeys, toJSON } from \"./to-json\";\nconst protectedProps = [\"name\", \"message\", \"stack\"];\n/**\n * Extends the new error with the properties of the original error and the `props` object.\n *\n * @param newError - The error object to extend\n * @param originalError - The original error object, if any\n * @param props - Additional properties to add, if any\n */\nexport function extendError(error, originalError, props) {\n  let onoError = error;\n  extendStack(onoError, originalError);\n  // Copy properties from the original error\n  if (originalError && typeof originalError === \"object\") {\n    mergeErrors(onoError, originalError);\n  }\n  // The default `toJSON` method doesn't output props like `name`, `message`, `stack`, etc.\n  // So replace it with one that outputs every property of the error.\n  onoError.toJSON = toJSON;\n  // On Node.js, add support for the `util.inspect()` method\n  // eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\n  if (addInspectMethod) {\n    addInspectMethod(onoError);\n  }\n  // Finally, copy custom properties that were specified by the user.\n  // These props OVERWRITE any previous props\n  if (props && typeof props === \"object\") {\n    Object.assign(onoError, props);\n  }\n  return onoError;\n}\n/**\n * Extend the error stack to include its cause\n */\nfunction extendStack(newError, originalError) {\n  let stackProp = Object.getOwnPropertyDescriptor(newError, \"stack\");\n  if (isLazyStack(stackProp)) {\n    lazyJoinStacks(stackProp, newError, originalError);\n  } else if (isWritableStack(stackProp)) {\n    newError.stack = joinStacks(newError, originalError);\n  }\n}\n/**\n * Merges properties of the original error with the new error.\n *\n * @param newError - The error object to extend\n * @param originalError - The original error object, if any\n */\nfunction mergeErrors(newError, originalError) {\n  // Get the original error's keys\n  // NOTE: We specifically exclude properties that we have already set on the new error.\n  // This is _especially_ important for the `stack` property, because this property has\n  // a lazy getter in some environments\n  let keys = getDeepKeys(originalError, protectedProps);\n  // HACK: We have to cast the errors to `any` so we can use symbol indexers.\n  // see https://github.com/Microsoft/TypeScript/issues/1863\n  let _newError = newError;\n  let _originalError = originalError;\n  for (let key of keys) {\n    if (_newError[key] === undefined) {\n      try {\n        _newError[key] = _originalError[key];\n      } catch (e) {\n        // This property is read-only, so it can't be copied\n      }\n    }\n  }\n}","map":{"version":3,"names":["addInspectMethod","isLazyStack","isWritableStack","joinStacks","lazyJoinStacks","getDeepKeys","toJSON","protectedProps","extendError","error","originalError","props","onoError","extendStack","mergeErrors","Object","assign","newError","stackProp","getOwnPropertyDescriptor","stack","keys","_newError","_originalError","key","undefined","e"],"sources":["../src/extend-error.ts"],"sourcesContent":[null],"mappings":"AAAA,SAASA,gBAAgB,QAAQ,mBAAmB;AACpD,SAASC,WAAW,EAAEC,eAAe,EAAEC,UAAU,EAAEC,cAAc,QAAQ,SAAS;AAClF,SAASC,WAAW,EAAEC,MAAM,QAAQ,WAAW;AAG/C,MAAMC,cAAc,GAA2B,CAAC,MAAM,EAAE,SAAS,EAAE,OAAO,CAAC;AAE3E;;;;;;;AAOA,OAAM,SAAUC,WAAWA,CAA6DC,KAAQ,EAAEC,aAAiB,EAAEC,KAAS;EAC5H,IAAIC,QAAQ,GAAGH,KAAmD;EAElEI,WAAW,CAACD,QAAQ,EAAEF,aAAa,CAAC;EAEpC;EACA,IAAIA,aAAa,IAAI,OAAOA,aAAa,KAAK,QAAQ,EAAE;IACtDI,WAAW,CAACF,QAAQ,EAAEF,aAAa,CAAC;;EAGtC;EACA;EACAE,QAAQ,CAACN,MAAM,GAAGA,MAAM;EAExB;EACA;EACA,IAAIN,gBAAgB,EAAE;IACpBA,gBAAgB,CAACY,QAAQ,CAAC;;EAG5B;EACA;EACA,IAAID,KAAK,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;IACtCI,MAAM,CAACC,MAAM,CAACJ,QAAQ,EAAED,KAAK,CAAC;;EAGhC,OAAOC,QAAQ;AACjB;AAEA;;;AAGA,SAASC,WAAWA,CAACI,QAAmB,EAAEP,aAAyB;EACjE,IAAIQ,SAAS,GAAGH,MAAM,CAACI,wBAAwB,CAACF,QAAQ,EAAE,OAAO,CAAC;EAElE,IAAIhB,WAAW,CAACiB,SAAS,CAAC,EAAE;IAC1Bd,cAAc,CAACc,SAAS,EAAED,QAAQ,EAAEP,aAAa,CAAC;GACnD,MACI,IAAIR,eAAe,CAACgB,SAAS,CAAC,EAAE;IACnCD,QAAQ,CAACG,KAAK,GAAGjB,UAAU,CAACc,QAAQ,EAAEP,aAAa,CAAC;;AAExD;AAEA;;;;;;AAMA,SAASI,WAAWA,CAACG,QAAmB,EAAEP,aAAwB;EAChE;EACA;EACA;EACA;EACA,IAAIW,IAAI,GAAGhB,WAAW,CAACK,aAAa,EAAEH,cAAc,CAAC;EAErD;EACA;EACA,IAAIe,SAAS,GAAGL,QAAe;EAC/B,IAAIM,cAAc,GAAGb,aAAoB;EAEzC,KAAK,IAAIc,GAAG,IAAIH,IAAI,EAAE;IACpB,IAAIC,SAAS,CAACE,GAAG,CAAC,KAAKC,SAAS,EAAE;MAChC,IAAI;QACFH,SAAS,CAACE,GAAG,CAAC,GAAGD,cAAc,CAACC,GAAG,CAAC;OACrC,CACD,OAAOE,CAAC,EAAE;QACR;MAAA;;;AAIR","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}