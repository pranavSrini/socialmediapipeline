{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nexports.__esModule = true;\nexports.deeplyStripKey = exports.isFunc = exports.normalizeArray = exports.objectify = exports.usesPolymorphism = void 0;\nfunction isObject(obj) {\n  return !!obj && typeof obj === 'object';\n}\nfunction usesPolymorphism(schema) {\n  if (schema.oneOf) {\n    return 'oneOf';\n  } else if (schema.anyOf) {\n    return 'anyOf';\n  } else if (schema.allOf) {\n    return 'allOf';\n  }\n  return false;\n}\nexports.usesPolymorphism = usesPolymorphism;\nfunction objectify(thing) {\n  if (!isObject(thing)) {\n    return {};\n  }\n  return thing;\n}\nexports.objectify = objectify;\nfunction normalizeArray(arr) {\n  if (Array.isArray(arr)) {\n    return arr;\n  }\n  return [arr];\n}\nexports.normalizeArray = normalizeArray;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunc(thing) {\n  return typeof thing === 'function';\n}\nexports.isFunc = isFunc;\n// Deeply strips a specific key from an object.\n//\n// `predicate` can be used to discriminate the stripping further,\n// by preserving the key's place in the object based on its value.\n// @todo make this have a better type than `any`\nfunction deeplyStripKey(input, keyToStrip, predicate // eslint-disable-line @typescript-eslint/no-unused-vars\n) {\n  if (predicate === void 0) {\n    predicate = function (obj, key) {\n      return true;\n    };\n  }\n  if (typeof input !== 'object' || Array.isArray(input) || input === null || !keyToStrip) {\n    return input;\n  }\n  var obj = __assign({}, input);\n  Object.keys(obj).forEach(function (k) {\n    if (k === keyToStrip && predicate(obj[k], k)) {\n      delete obj[k];\n      return;\n    }\n    obj[k] = deeplyStripKey(obj[k], keyToStrip, predicate);\n  });\n  return obj;\n}\nexports.deeplyStripKey = deeplyStripKey;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","exports","__esModule","deeplyStripKey","isFunc","normalizeArray","objectify","usesPolymorphism","isObject","obj","schema","oneOf","anyOf","allOf","thing","arr","Array","isArray","input","keyToStrip","predicate","key","keys","forEach","k"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/oas/dist/samples/utils.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nexports.__esModule = true;\nexports.deeplyStripKey = exports.isFunc = exports.normalizeArray = exports.objectify = exports.usesPolymorphism = void 0;\nfunction isObject(obj) {\n    return !!obj && typeof obj === 'object';\n}\nfunction usesPolymorphism(schema) {\n    if (schema.oneOf) {\n        return 'oneOf';\n    }\n    else if (schema.anyOf) {\n        return 'anyOf';\n    }\n    else if (schema.allOf) {\n        return 'allOf';\n    }\n    return false;\n}\nexports.usesPolymorphism = usesPolymorphism;\nfunction objectify(thing) {\n    if (!isObject(thing)) {\n        return {};\n    }\n    return thing;\n}\nexports.objectify = objectify;\nfunction normalizeArray(arr) {\n    if (Array.isArray(arr)) {\n        return arr;\n    }\n    return [arr];\n}\nexports.normalizeArray = normalizeArray;\n// eslint-disable-next-line @typescript-eslint/ban-types\nfunction isFunc(thing) {\n    return typeof thing === 'function';\n}\nexports.isFunc = isFunc;\n// Deeply strips a specific key from an object.\n//\n// `predicate` can be used to discriminate the stripping further,\n// by preserving the key's place in the object based on its value.\n// @todo make this have a better type than `any`\nfunction deeplyStripKey(input, keyToStrip, predicate // eslint-disable-line @typescript-eslint/no-unused-vars\n) {\n    if (predicate === void 0) { predicate = function (obj, key) { return true; }; }\n    if (typeof input !== 'object' || Array.isArray(input) || input === null || !keyToStrip) {\n        return input;\n    }\n    var obj = __assign({}, input);\n    Object.keys(obj).forEach(function (k) {\n        if (k === keyToStrip && predicate(obj[k], k)) {\n            delete obj[k];\n            return;\n        }\n        obj[k] = deeplyStripKey(obj[k], keyToStrip, predicate);\n    });\n    return obj;\n}\nexports.deeplyStripKey = deeplyStripKey;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}