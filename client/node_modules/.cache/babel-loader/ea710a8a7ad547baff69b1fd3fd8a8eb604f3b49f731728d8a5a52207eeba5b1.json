{"ast":null,"code":"const compare = require('json-schema-compare');\nconst forEach = require('lodash/forEach');\nconst {\n  allUniqueKeys,\n  deleteUndefinedProps,\n  has,\n  isSchema,\n  notUndefined,\n  uniqWith\n} = require('../common');\nfunction removeFalseSchemasFromArray(target) {\n  forEach(target, function (schema, index) {\n    if (schema === false) {\n      target.splice(index, 1);\n    }\n  });\n}\nfunction getItemSchemas(subSchemas, key) {\n  return subSchemas.map(function (sub) {\n    if (!sub) {\n      return undefined;\n    }\n    if (Array.isArray(sub.items)) {\n      const schemaAtPos = sub.items[key];\n      if (isSchema(schemaAtPos)) {\n        return schemaAtPos;\n      } else if (has(sub, 'additionalItems')) {\n        return sub.additionalItems;\n      }\n    } else {\n      return sub.items;\n    }\n    return undefined;\n  });\n}\nfunction getAdditionalSchemas(subSchemas) {\n  return subSchemas.map(function (sub) {\n    if (!sub) {\n      return undefined;\n    }\n    if (Array.isArray(sub.items)) {\n      return sub.additionalItems;\n    }\n    return sub.items;\n  });\n}\n\n// Provide source when array\nfunction mergeItems(group, mergeSchemas, items) {\n  const allKeys = allUniqueKeys(items);\n  return allKeys.reduce(function (all, key) {\n    const schemas = getItemSchemas(group, key);\n    const compacted = uniqWith(schemas.filter(notUndefined), compare);\n    all[key] = mergeSchemas(compacted, key);\n    return all;\n  }, []);\n}\nmodule.exports = {\n  keywords: ['items', 'additionalItems'],\n  resolver(values, parents, mergers) {\n    // const createSubMerger = groupKey => (schemas, key) => mergeSchemas(schemas, parents.concat(groupKey, key))\n    const items = values.map(s => s.items);\n    const itemsCompacted = items.filter(notUndefined);\n    const returnObject = {};\n\n    // if all items keyword values are schemas, we can merge them as simple schemas\n    // if not we need to merge them as mixed\n    if (itemsCompacted.every(isSchema)) {\n      returnObject.items = mergers.items(items);\n    } else {\n      returnObject.items = mergeItems(values, mergers.items, items);\n    }\n    let schemasAtLastPos;\n    if (itemsCompacted.every(Array.isArray)) {\n      schemasAtLastPos = values.map(s => s.additionalItems);\n    } else if (itemsCompacted.some(Array.isArray)) {\n      schemasAtLastPos = getAdditionalSchemas(values);\n    }\n    if (schemasAtLastPos) {\n      returnObject.additionalItems = mergers.additionalItems(schemasAtLastPos);\n    }\n    if (returnObject.additionalItems === false && Array.isArray(returnObject.items)) {\n      removeFalseSchemasFromArray(returnObject.items);\n    }\n    return deleteUndefinedProps(returnObject);\n  }\n};","map":{"version":3,"names":["compare","require","forEach","allUniqueKeys","deleteUndefinedProps","has","isSchema","notUndefined","uniqWith","removeFalseSchemasFromArray","target","schema","index","splice","getItemSchemas","subSchemas","key","map","sub","undefined","Array","isArray","items","schemaAtPos","additionalItems","getAdditionalSchemas","mergeItems","group","mergeSchemas","allKeys","reduce","all","schemas","compacted","filter","module","exports","keywords","resolver","values","parents","mergers","s","itemsCompacted","returnObject","every","schemasAtLastPos","some"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/json-schema-merge-allof/src/complex-resolvers/items.js"],"sourcesContent":["\nconst compare = require('json-schema-compare')\nconst forEach = require('lodash/forEach')\nconst {\n  allUniqueKeys,\n  deleteUndefinedProps,\n  has,\n  isSchema,\n  notUndefined,\n  uniqWith\n} = require('../common')\n\nfunction removeFalseSchemasFromArray(target) {\n  forEach(target, function(schema, index) {\n    if (schema === false) {\n      target.splice(index, 1)\n    }\n  })\n}\n\nfunction getItemSchemas(subSchemas, key) {\n  return subSchemas.map(function(sub) {\n    if (!sub) {\n      return undefined\n    }\n\n    if (Array.isArray(sub.items)) {\n      const schemaAtPos = sub.items[key]\n      if (isSchema(schemaAtPos)) {\n        return schemaAtPos\n      } else if (has(sub, 'additionalItems')) {\n        return sub.additionalItems\n      }\n    } else {\n      return sub.items\n    }\n\n    return undefined\n  })\n}\n\nfunction getAdditionalSchemas(subSchemas) {\n  return subSchemas.map(function(sub) {\n    if (!sub) {\n      return undefined\n    }\n    if (Array.isArray(sub.items)) {\n      return sub.additionalItems\n    }\n    return sub.items\n  })\n}\n\n// Provide source when array\nfunction mergeItems(group, mergeSchemas, items) {\n  const allKeys = allUniqueKeys(items)\n  return allKeys.reduce(function(all, key) {\n    const schemas = getItemSchemas(group, key)\n    const compacted = uniqWith(schemas.filter(notUndefined), compare)\n    all[key] = mergeSchemas(compacted, key)\n    return all\n  }, [])\n}\n\nmodule.exports = {\n  keywords: ['items', 'additionalItems'],\n  resolver(values, parents, mergers) {\n    // const createSubMerger = groupKey => (schemas, key) => mergeSchemas(schemas, parents.concat(groupKey, key))\n    const items = values.map(s => s.items)\n    const itemsCompacted = items.filter(notUndefined)\n    const returnObject = {}\n\n    // if all items keyword values are schemas, we can merge them as simple schemas\n    // if not we need to merge them as mixed\n    if (itemsCompacted.every(isSchema)) {\n      returnObject.items = mergers.items(items)\n    } else {\n      returnObject.items = mergeItems(values, mergers.items, items)\n    }\n\n    let schemasAtLastPos\n    if (itemsCompacted.every(Array.isArray)) {\n      schemasAtLastPos = values.map(s => s.additionalItems)\n    } else if (itemsCompacted.some(Array.isArray)) {\n      schemasAtLastPos = getAdditionalSchemas(values)\n    }\n\n    if (schemasAtLastPos) {\n      returnObject.additionalItems = mergers.additionalItems(schemasAtLastPos)\n    }\n\n    if (returnObject.additionalItems === false && Array.isArray(returnObject.items)) {\n      removeFalseSchemasFromArray(returnObject.items)\n    }\n\n    return deleteUndefinedProps(returnObject)\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}