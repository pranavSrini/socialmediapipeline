{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nexports.__esModule = true;\nvar json_schema_merge_allof_1 = __importDefault(require(\"json-schema-merge-allof\"));\nvar memoizee_1 = __importDefault(require(\"memoizee\"));\nvar utils_1 = require(\"./utils\");\nvar sampleDefaults = function (genericSample) {\n  return function (schema) {\n    return typeof schema[\"default\"] === typeof genericSample ? schema[\"default\"] : genericSample;\n  };\n};\nvar primitives = {\n  string: sampleDefaults('string'),\n  string_email: sampleDefaults('user@example.com'),\n  'string_date-time': sampleDefaults(new Date().toISOString()),\n  string_date: sampleDefaults(new Date().toISOString().substring(0, 10)),\n  'string_YYYY-MM-DD': sampleDefaults(new Date().toISOString().substring(0, 10)),\n  string_uuid: sampleDefaults('3fa85f64-5717-4562-b3fc-2c963f66afa6'),\n  string_hostname: sampleDefaults('example.com'),\n  string_ipv4: sampleDefaults('198.51.100.42'),\n  string_ipv6: sampleDefaults('2001:0db8:5b96:0000:0000:426f:8e17:642a'),\n  number: sampleDefaults(0),\n  number_float: sampleDefaults(0.0),\n  integer: sampleDefaults(0),\n  boolean: sampleDefaults(true)\n};\nvar primitive = function (schema) {\n  schema = (0, utils_1.objectify)(schema);\n  var type = schema.type,\n    format = schema.format;\n  // @todo add support for if `type` is an array\n  var fn = primitives[\"\".concat(type, \"_\").concat(format)] || primitives[type];\n  if ((0, utils_1.isFunc)(fn)) {\n    return fn(schema);\n  }\n  return \"Unknown Type: \".concat(schema.type);\n};\n/**\n * Generate a piece of sample data from a JSON Schema object. If `example` declarations are present\n * they will be utilized, but generally this will generate fake data for the information present in\n * the schema.\n *\n * @param schema JSON Schema to generate a sample for.\n */\nfunction sampleFromSchema(schema, opts) {\n  if (opts === void 0) {\n    opts = {};\n  }\n  var objectifySchema = (0, utils_1.objectify)(schema);\n  var type = objectifySchema.type;\n  var hasPolymorphism = (0, utils_1.usesPolymorphism)(objectifySchema);\n  if (hasPolymorphism === 'allOf') {\n    try {\n      return sampleFromSchema((0, json_schema_merge_allof_1[\"default\"])(objectifySchema, {\n        resolvers: {\n          // Ignore any unrecognized OAS-specific keywords that might be present on the schema\n          // (like `xml`).\n          defaultResolver: json_schema_merge_allof_1[\"default\"].options.resolvers.title\n        }\n      }), opts);\n    } catch (error) {\n      return undefined;\n    }\n  } else if (hasPolymorphism) {\n    return sampleFromSchema(objectifySchema[hasPolymorphism][0], opts);\n  }\n  var example = objectifySchema.example,\n    additionalProperties = objectifySchema.additionalProperties,\n    properties = objectifySchema.properties,\n    items = objectifySchema.items;\n  var includeReadOnly = opts.includeReadOnly,\n    includeWriteOnly = opts.includeWriteOnly;\n  if (example !== undefined) {\n    return (0, utils_1.deeplyStripKey)(example, '$$ref', function (val) {\n      // do a couple of quick sanity tests to ensure the value\n      // looks like a $$ref that swagger-client generates.\n      return typeof val === 'string' && val.indexOf('#') > -1;\n    });\n  }\n  if (!type) {\n    if (properties || additionalProperties) {\n      type = 'object';\n    } else if (items) {\n      type = 'array';\n    } else {\n      return undefined;\n    }\n  }\n  if (type === 'object') {\n    var props = (0, utils_1.objectify)(properties);\n    var obj = {};\n    // eslint-disable-next-line no-restricted-syntax\n    for (var name_1 in props) {\n      if (props[name_1] && props[name_1].deprecated) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (props[name_1] && props[name_1].readOnly && !includeReadOnly) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      if (props[name_1] && props[name_1].writeOnly && !includeWriteOnly) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n      obj[name_1] = sampleFromSchema(props[name_1], opts);\n    }\n    if (additionalProperties === true) {\n      obj.additionalProp = {};\n    } else if (additionalProperties) {\n      var additionalProps = (0, utils_1.objectify)(additionalProperties);\n      var additionalPropVal = sampleFromSchema(additionalProps, opts);\n      obj.additionalProp = additionalPropVal;\n    }\n    return obj;\n  }\n  if (type === 'array') {\n    // `items` should always be present on arrays, but if it isn't we should at least do our best\n    // to support its absence.\n    if (typeof items === 'undefined') {\n      return [];\n    }\n    if (Array.isArray(items.anyOf)) {\n      return items.anyOf.map(function (i) {\n        return sampleFromSchema(i, opts);\n      });\n    }\n    if (Array.isArray(items.oneOf)) {\n      return items.oneOf.map(function (i) {\n        return sampleFromSchema(i, opts);\n      });\n    }\n    return [sampleFromSchema(items, opts)];\n  }\n  if (schema[\"enum\"]) {\n    if (schema[\"default\"]) {\n      return schema[\"default\"];\n    }\n    return (0, utils_1.normalizeArray)(schema[\"enum\"])[0];\n  }\n  if (type === 'file') {\n    return undefined;\n  }\n  return primitive(schema);\n}\nexports[\"default\"] = (0, memoizee_1[\"default\"])(sampleFromSchema);","map":{"version":3,"names":["__importDefault","mod","__esModule","exports","json_schema_merge_allof_1","require","memoizee_1","utils_1","sampleDefaults","genericSample","schema","primitives","string","string_email","Date","toISOString","string_date","substring","string_uuid","string_hostname","string_ipv4","string_ipv6","number","number_float","integer","boolean","primitive","objectify","type","format","fn","concat","isFunc","sampleFromSchema","opts","objectifySchema","hasPolymorphism","usesPolymorphism","resolvers","defaultResolver","options","title","error","undefined","example","additionalProperties","properties","items","includeReadOnly","includeWriteOnly","deeplyStripKey","val","indexOf","props","obj","name_1","deprecated","readOnly","writeOnly","additionalProp","additionalProps","additionalPropVal","Array","isArray","anyOf","map","i","oneOf","normalizeArray"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/server/.api/apis/aivideoapi/node_modules/oas/dist/samples/index.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar json_schema_merge_allof_1 = __importDefault(require(\"json-schema-merge-allof\"));\nvar memoizee_1 = __importDefault(require(\"memoizee\"));\nvar utils_1 = require(\"./utils\");\nvar sampleDefaults = function (genericSample) {\n    return function (schema) {\n        return typeof schema[\"default\"] === typeof genericSample ? schema[\"default\"] : genericSample;\n    };\n};\nvar primitives = {\n    string: sampleDefaults('string'),\n    string_email: sampleDefaults('user@example.com'),\n    'string_date-time': sampleDefaults(new Date().toISOString()),\n    string_date: sampleDefaults(new Date().toISOString().substring(0, 10)),\n    'string_YYYY-MM-DD': sampleDefaults(new Date().toISOString().substring(0, 10)),\n    string_uuid: sampleDefaults('3fa85f64-5717-4562-b3fc-2c963f66afa6'),\n    string_hostname: sampleDefaults('example.com'),\n    string_ipv4: sampleDefaults('198.51.100.42'),\n    string_ipv6: sampleDefaults('2001:0db8:5b96:0000:0000:426f:8e17:642a'),\n    number: sampleDefaults(0),\n    number_float: sampleDefaults(0.0),\n    integer: sampleDefaults(0),\n    boolean: sampleDefaults(true)\n};\nvar primitive = function (schema) {\n    schema = (0, utils_1.objectify)(schema);\n    var type = schema.type, format = schema.format;\n    // @todo add support for if `type` is an array\n    var fn = primitives[\"\".concat(type, \"_\").concat(format)] || primitives[type];\n    if ((0, utils_1.isFunc)(fn)) {\n        return fn(schema);\n    }\n    return \"Unknown Type: \".concat(schema.type);\n};\n/**\n * Generate a piece of sample data from a JSON Schema object. If `example` declarations are present\n * they will be utilized, but generally this will generate fake data for the information present in\n * the schema.\n *\n * @param schema JSON Schema to generate a sample for.\n */\nfunction sampleFromSchema(schema, opts) {\n    if (opts === void 0) { opts = {}; }\n    var objectifySchema = (0, utils_1.objectify)(schema);\n    var type = objectifySchema.type;\n    var hasPolymorphism = (0, utils_1.usesPolymorphism)(objectifySchema);\n    if (hasPolymorphism === 'allOf') {\n        try {\n            return sampleFromSchema((0, json_schema_merge_allof_1[\"default\"])(objectifySchema, {\n                resolvers: {\n                    // Ignore any unrecognized OAS-specific keywords that might be present on the schema\n                    // (like `xml`).\n                    defaultResolver: json_schema_merge_allof_1[\"default\"].options.resolvers.title\n                }\n            }), opts);\n        }\n        catch (error) {\n            return undefined;\n        }\n    }\n    else if (hasPolymorphism) {\n        return sampleFromSchema(objectifySchema[hasPolymorphism][0], opts);\n    }\n    var example = objectifySchema.example, additionalProperties = objectifySchema.additionalProperties, properties = objectifySchema.properties, items = objectifySchema.items;\n    var includeReadOnly = opts.includeReadOnly, includeWriteOnly = opts.includeWriteOnly;\n    if (example !== undefined) {\n        return (0, utils_1.deeplyStripKey)(example, '$$ref', function (val) {\n            // do a couple of quick sanity tests to ensure the value\n            // looks like a $$ref that swagger-client generates.\n            return typeof val === 'string' && val.indexOf('#') > -1;\n        });\n    }\n    if (!type) {\n        if (properties || additionalProperties) {\n            type = 'object';\n        }\n        else if (items) {\n            type = 'array';\n        }\n        else {\n            return undefined;\n        }\n    }\n    if (type === 'object') {\n        var props = (0, utils_1.objectify)(properties);\n        var obj = {};\n        // eslint-disable-next-line no-restricted-syntax\n        for (var name_1 in props) {\n            if (props[name_1] && props[name_1].deprecated) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (props[name_1] && props[name_1].readOnly && !includeReadOnly) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            if (props[name_1] && props[name_1].writeOnly && !includeWriteOnly) {\n                // eslint-disable-next-line no-continue\n                continue;\n            }\n            obj[name_1] = sampleFromSchema(props[name_1], opts);\n        }\n        if (additionalProperties === true) {\n            obj.additionalProp = {};\n        }\n        else if (additionalProperties) {\n            var additionalProps = (0, utils_1.objectify)(additionalProperties);\n            var additionalPropVal = sampleFromSchema(additionalProps, opts);\n            obj.additionalProp = additionalPropVal;\n        }\n        return obj;\n    }\n    if (type === 'array') {\n        // `items` should always be present on arrays, but if it isn't we should at least do our best\n        // to support its absence.\n        if (typeof items === 'undefined') {\n            return [];\n        }\n        if (Array.isArray(items.anyOf)) {\n            return items.anyOf.map(function (i) { return sampleFromSchema(i, opts); });\n        }\n        if (Array.isArray(items.oneOf)) {\n            return items.oneOf.map(function (i) { return sampleFromSchema(i, opts); });\n        }\n        return [sampleFromSchema(items, opts)];\n    }\n    if (schema[\"enum\"]) {\n        if (schema[\"default\"]) {\n            return schema[\"default\"];\n        }\n        return (0, utils_1.normalizeArray)(schema[\"enum\"])[0];\n    }\n    if (type === 'file') {\n        return undefined;\n    }\n    return primitive(schema);\n}\nexports[\"default\"] = (0, memoizee_1[\"default\"])(sampleFromSchema);\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}