{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\nfunction valueEnumerable(value) {\n  return {\n    enumerable: true,\n    value\n  };\n}\nfunction valueEnumerableWritable(value) {\n  return {\n    enumerable: true,\n    writable: true,\n    value\n  };\n}\nlet d = {};\nlet truthy = () => true;\nlet empty = () => ({});\nlet identity = a => a;\nlet callBoth = (par, fn, self, args) => par.apply(self, args) && fn.apply(self, args);\nlet callForward = (par, fn, self, [a, b]) => fn.call(self, par.call(self, a, b), b);\nlet create = (a, b) => Object.freeze(Object.create(a, b));\nfunction stack(fns, def, caller) {\n  return fns.reduce((par, fn) => {\n    return function (...args) {\n      return caller(par, fn, this, args);\n    };\n  }, def);\n}\nfunction fnType(fn) {\n  return create(this, {\n    fn: valueEnumerable(fn)\n  });\n}\nlet reduceType = {};\nlet reduce = fnType.bind(reduceType);\nlet action = fn => reduce((ctx, ev) => !!~fn(ctx, ev) && ctx);\nlet guardType = {};\nlet guard = fnType.bind(guardType);\nfunction filter(Type, arr) {\n  return arr.filter(value => Type.isPrototypeOf(value));\n}\nfunction makeTransition(from, to, ...args) {\n  let guards = stack(filter(guardType, args).map(t => t.fn), truthy, callBoth);\n  let reducers = stack(filter(reduceType, args).map(t => t.fn), identity, callForward);\n  return create(this, {\n    from: valueEnumerable(from),\n    to: valueEnumerable(to),\n    guards: valueEnumerable(guards),\n    reducers: valueEnumerable(reducers)\n  });\n}\nlet transitionType = {};\nlet immediateType = {};\nlet transition = makeTransition.bind(transitionType);\nlet immediate = makeTransition.bind(immediateType, null);\nfunction enterImmediate(machine, service, event) {\n  return transitionTo(service, machine, event, this.immediates) || machine;\n}\nfunction transitionsToMap(transitions) {\n  let m = new Map();\n  for (let t of transitions) {\n    if (!m.has(t.from)) m.set(t.from, []);\n    m.get(t.from).push(t);\n  }\n  return m;\n}\nlet stateType = {\n  enter: identity\n};\nfunction state(...args) {\n  let transitions = filter(transitionType, args);\n  let immediates = filter(immediateType, args);\n  let desc = {\n    final: valueEnumerable(args.length === 0),\n    transitions: valueEnumerable(transitionsToMap(transitions))\n  };\n  if (immediates.length) {\n    desc.immediates = valueEnumerable(immediates);\n    desc.enter = valueEnumerable(enterImmediate);\n  }\n  return create(stateType, desc);\n}\nlet invokeFnType = {\n  enter(machine2, service, event) {\n    let rn = this.fn.call(service, service.context, event);\n    if (machine.isPrototypeOf(rn)) return create(invokeMachineType, {\n      machine: valueEnumerable(rn),\n      transitions: valueEnumerable(this.transitions)\n    }).enter(machine2, service, event);\n    rn.then(data => service.send({\n      type: 'done',\n      data\n    })).catch(error => service.send({\n      type: 'error',\n      error\n    }));\n    return machine2;\n  }\n};\nlet invokeMachineType = {\n  enter(machine, service, event) {\n    service.child = interpret(this.machine, s => {\n      service.onChange(s);\n      if (service.child == s && s.machine.state.value.final) {\n        delete service.child;\n        service.send({\n          type: 'done',\n          data: s.context\n        });\n      }\n    }, service.context, event);\n    if (service.child.machine.state.value.final) {\n      let data = service.child.context;\n      delete service.child;\n      return transitionTo(service, machine, {\n        type: 'done',\n        data\n      }, this.transitions.get('done'));\n    }\n    return machine;\n  }\n};\nfunction invoke(fn, ...transitions) {\n  let t = valueEnumerable(transitionsToMap(transitions));\n  return machine.isPrototypeOf(fn) ? create(invokeMachineType, {\n    machine: valueEnumerable(fn),\n    transitions: t\n  }) : create(invokeFnType, {\n    fn: valueEnumerable(fn),\n    transitions: t\n  });\n}\nlet machine = {\n  get state() {\n    return {\n      name: this.current,\n      value: this.states[this.current]\n    };\n  }\n};\nfunction createMachine(current, states, contextFn = empty) {\n  if (typeof current !== 'string') {\n    contextFn = states || empty;\n    states = current;\n    current = Object.keys(states)[0];\n  }\n  if (d._create) d._create(current, states);\n  return create(machine, {\n    context: valueEnumerable(contextFn),\n    current: valueEnumerable(current),\n    states: valueEnumerable(states)\n  });\n}\nfunction transitionTo(service, machine, fromEvent, candidates) {\n  let {\n    context\n  } = service;\n  for (let {\n    to,\n    guards,\n    reducers\n  } of candidates) {\n    if (guards(context, fromEvent)) {\n      service.context = reducers.call(service, context, fromEvent);\n      let original = machine.original || machine;\n      let newMachine = create(original, {\n        current: valueEnumerable(to),\n        original: {\n          value: original\n        }\n      });\n      if (d._onEnter) d._onEnter(machine, to, service.context, context, fromEvent);\n      let state = newMachine.state.value;\n      return state.enter(newMachine, service, fromEvent);\n    }\n  }\n}\nfunction send(service, event) {\n  let eventName = event.type || event;\n  let {\n    machine\n  } = service;\n  let {\n    value: state,\n    name: currentStateName\n  } = machine.state;\n  if (state.transitions.has(eventName)) {\n    return transitionTo(service, machine, event, state.transitions.get(eventName)) || machine;\n  } else {\n    if (d._send) d._send(eventName, currentStateName);\n  }\n  return machine;\n}\nlet service = {\n  send(event) {\n    this.machine = send(this, event);\n\n    // TODO detect change\n    this.onChange(this);\n  }\n};\nfunction interpret(machine, onChange, initialContext, event) {\n  let s = Object.create(service, {\n    machine: valueEnumerableWritable(machine),\n    context: valueEnumerableWritable(machine.context(initialContext, event)),\n    onChange: valueEnumerable(onChange)\n  });\n  s.send = s.send.bind(s);\n  s.machine = s.machine.state.value.enter(s.machine, s, event);\n  return s;\n}\nexports.action = action;\nexports.createMachine = createMachine;\nexports.d = d;\nexports.guard = guard;\nexports.immediate = immediate;\nexports.interpret = interpret;\nexports.invoke = invoke;\nexports.reduce = reduce;\nexports.state = state;\nexports.transition = transition;","map":{"version":3,"names":["Object","defineProperty","exports","value","valueEnumerable","enumerable","valueEnumerableWritable","writable","d","truthy","empty","identity","a","callBoth","par","fn","self","args","apply","callForward","b","call","create","freeze","stack","fns","def","caller","reduce","fnType","reduceType","bind","action","ctx","ev","guardType","guard","filter","Type","arr","isPrototypeOf","makeTransition","from","to","guards","map","t","reducers","transitionType","immediateType","transition","immediate","enterImmediate","machine","service","event","transitionTo","immediates","transitionsToMap","transitions","m","Map","has","set","get","push","stateType","enter","state","desc","final","length","invokeFnType","machine2","rn","context","invokeMachineType","then","data","send","type","catch","error","child","interpret","s","onChange","invoke","name","current","states","createMachine","contextFn","keys","_create","fromEvent","candidates","original","newMachine","_onEnter","eventName","currentStateName","_send","initialContext"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/node_modules/robot3/dist/machine.js"],"sourcesContent":["'use strict';\n\nObject.defineProperty(exports, '__esModule', { value: true });\n\nfunction valueEnumerable(value) {\n  return { enumerable: true, value };\n}\n\nfunction valueEnumerableWritable(value) {\n  return { enumerable: true, writable: true, value };\n}\n\nlet d = {};\nlet truthy = () => true;\nlet empty = () => ({});\nlet identity = a => a;\nlet callBoth = (par, fn, self, args) => par.apply(self, args) && fn.apply(self, args);\nlet callForward = (par, fn, self, [a, b]) => fn.call(self, par.call(self, a, b), b);\nlet create = (a, b) => Object.freeze(Object.create(a, b));\n\nfunction stack(fns, def, caller) {\n  return fns.reduce((par, fn) => {\n    return function(...args) {\n      return caller(par, fn, this, args);\n    };\n  }, def);\n}\n\nfunction fnType(fn) {\n  return create(this, { fn: valueEnumerable(fn) });\n}\n\nlet reduceType = {};\nlet reduce = fnType.bind(reduceType);\nlet action = fn => reduce((ctx, ev) => !!~fn(ctx, ev) && ctx);\n\nlet guardType = {};\nlet guard = fnType.bind(guardType);\n\nfunction filter(Type, arr) {\n  return arr.filter(value => Type.isPrototypeOf(value));\n}\n\nfunction makeTransition(from, to, ...args) {\n  let guards = stack(filter(guardType, args).map(t => t.fn), truthy, callBoth);\n  let reducers = stack(filter(reduceType, args).map(t => t.fn), identity, callForward);\n  return create(this, {\n    from: valueEnumerable(from),\n    to: valueEnumerable(to),\n    guards: valueEnumerable(guards),\n    reducers: valueEnumerable(reducers)\n  });\n}\n\nlet transitionType = {};\nlet immediateType = {};\nlet transition = makeTransition.bind(transitionType);\nlet immediate = makeTransition.bind(immediateType, null);\n\nfunction enterImmediate(machine, service, event) {\n  return transitionTo(service, machine, event, this.immediates) || machine;\n}\n\nfunction transitionsToMap(transitions) {\n  let m = new Map();\n  for(let t of transitions) {\n    if(!m.has(t.from)) m.set(t.from, []);\n    m.get(t.from).push(t);\n  }\n  return m;\n}\n\nlet stateType = { enter: identity };\nfunction state(...args) {\n  let transitions = filter(transitionType, args);\n  let immediates = filter(immediateType, args);\n  let desc = {\n    final: valueEnumerable(args.length === 0),\n    transitions: valueEnumerable(transitionsToMap(transitions))\n  };\n  if(immediates.length) {\n    desc.immediates = valueEnumerable(immediates);\n    desc.enter = valueEnumerable(enterImmediate);\n  }\n  return create(stateType, desc);\n}\n\nlet invokeFnType = {\n  enter(machine2, service, event) {\n    let rn = this.fn.call(service, service.context, event);\n    if(machine.isPrototypeOf(rn))\n      return create(invokeMachineType, {\n        machine: valueEnumerable(rn),\n        transitions: valueEnumerable(this.transitions)\n      }).enter(machine2, service, event)\n    rn.then(data => service.send({ type: 'done', data }))\n      .catch(error => service.send({ type: 'error', error }));\n    return machine2;\n  }\n};\nlet invokeMachineType = {\n  enter(machine, service, event) {\n    service.child = interpret(this.machine, s => {\n      service.onChange(s);\n      if(service.child == s && s.machine.state.value.final) {\n        delete service.child;\n        service.send({ type: 'done', data: s.context });\n      }\n    }, service.context, event);\n    if(service.child.machine.state.value.final) {\n      let data = service.child.context;\n      delete service.child;\n      return transitionTo(service, machine, { type: 'done', data }, this.transitions.get('done'));\n    }\n    return machine;\n  }\n};\nfunction invoke(fn, ...transitions) {\n  let t = valueEnumerable(transitionsToMap(transitions));\n  return machine.isPrototypeOf(fn) ?\n    create(invokeMachineType, {\n      machine: valueEnumerable(fn),\n      transitions: t\n    }) :\n    create(invokeFnType, {\n      fn: valueEnumerable(fn),\n      transitions: t\n    });\n}\n\nlet machine = {\n  get state() {\n    return {\n      name: this.current,\n      value: this.states[this.current]\n    };\n  }\n};\n\nfunction createMachine(current, states, contextFn = empty) {\n  if(typeof current !== 'string') {\n    contextFn = states || empty;\n    states = current;\n    current = Object.keys(states)[0];\n  }\n  if(d._create) d._create(current, states);\n  return create(machine, {\n    context: valueEnumerable(contextFn),\n    current: valueEnumerable(current),\n    states: valueEnumerable(states)\n  });\n}\n\nfunction transitionTo(service, machine, fromEvent, candidates) {\n  let { context } = service;\n  for(let { to, guards, reducers } of candidates) {  \n    if(guards(context, fromEvent)) {\n      service.context = reducers.call(service, context, fromEvent);\n\n      let original = machine.original || machine;\n      let newMachine = create(original, {\n        current: valueEnumerable(to),\n        original: { value: original }\n      });\n\n      if (d._onEnter) d._onEnter(machine, to, service.context, context, fromEvent);\n      let state = newMachine.state.value;\n      return state.enter(newMachine, service, fromEvent);\n    }\n  }\n}\n\nfunction send(service, event) {\n  let eventName = event.type || event;\n  let { machine } = service;\n  let { value: state, name: currentStateName } = machine.state;\n  \n  if(state.transitions.has(eventName)) {\n    return transitionTo(service, machine, event, state.transitions.get(eventName)) || machine;\n  } else {\n    if(d._send) d._send(eventName, currentStateName);\n  }\n  return machine;\n}\n\nlet service = {\n  send(event) {\n    this.machine = send(this, event);\n    \n    // TODO detect change\n    this.onChange(this);\n  }\n};\n\nfunction interpret(machine, onChange, initialContext, event) {\n  let s = Object.create(service, {\n    machine: valueEnumerableWritable(machine),\n    context: valueEnumerableWritable(machine.context(initialContext, event)),\n    onChange: valueEnumerable(onChange)\n  });\n  s.send = s.send.bind(s);\n  s.machine = s.machine.state.value.enter(s.machine, s, event);\n  return s;\n}\n\nexports.action = action;\nexports.createMachine = createMachine;\nexports.d = d;\nexports.guard = guard;\nexports.immediate = immediate;\nexports.interpret = interpret;\nexports.invoke = invoke;\nexports.reduce = reduce;\nexports.state = state;\nexports.transition = transition;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}