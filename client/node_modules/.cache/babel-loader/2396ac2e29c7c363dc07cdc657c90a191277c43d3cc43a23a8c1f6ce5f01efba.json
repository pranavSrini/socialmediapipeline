{"ast":null,"code":"// ExtensionCodec to handle MessagePack extensions\nimport { ExtData } from \"./ExtData.mjs\";\nimport { timestampExtension } from \"./timestamp.mjs\";\nexport class ExtensionCodec {\n  constructor() {\n    // built-in extensions\n    this.builtInEncoders = [];\n    this.builtInDecoders = [];\n    // custom extensions\n    this.encoders = [];\n    this.decoders = [];\n    this.register(timestampExtension);\n  }\n  register({\n    type,\n    encode,\n    decode\n  }) {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = -1 - type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n  tryToEncode(object, context) {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n  decode(data, type, context) {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\nExtensionCodec.defaultCodec = new ExtensionCodec();","map":{"version":3,"names":["ExtData","timestampExtension","ExtensionCodec","constructor","builtInEncoders","builtInDecoders","encoders","decoders","register","type","encode","decode","index","tryToEncode","object","context","i","length","encodeExt","data","decodeExt","defaultCodec"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/node_modules/@msgpack/msgpack/src/ExtensionCodec.ts"],"sourcesContent":["// ExtensionCodec to handle MessagePack extensions\n\nimport { ExtData } from \"./ExtData.ts\";\nimport { timestampExtension } from \"./timestamp.ts\";\n\nexport type ExtensionDecoderType<ContextType> = (\n  data: Uint8Array,\n  extensionType: number,\n  context: ContextType,\n) => unknown;\n\nexport type ExtensionEncoderType<ContextType> = (\n  input: unknown,\n  context: ContextType,\n) => Uint8Array | ((dataPos: number) => Uint8Array) | null;\n\n// immutable interface to ExtensionCodec\nexport type ExtensionCodecType<ContextType> = {\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n  tryToEncode(object: unknown, context: ContextType): ExtData | null;\n  decode(data: Uint8Array, extType: number, context: ContextType): unknown;\n};\n\nexport class ExtensionCodec<ContextType = undefined> implements ExtensionCodecType<ContextType> {\n  public static readonly defaultCodec: ExtensionCodecType<undefined> = new ExtensionCodec();\n\n  // ensures ExtensionCodecType<X> matches ExtensionCodec<X>\n  // this will make type errors a lot more clear\n  // eslint-disable-next-line @typescript-eslint/naming-convention\n  __brand?: ContextType;\n\n  // built-in extensions\n  private readonly builtInEncoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly builtInDecoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  // custom extensions\n  private readonly encoders: Array<ExtensionEncoderType<ContextType> | undefined | null> = [];\n  private readonly decoders: Array<ExtensionDecoderType<ContextType> | undefined | null> = [];\n\n  public constructor() {\n    this.register(timestampExtension);\n  }\n\n  public register({\n    type,\n    encode,\n    decode,\n  }: {\n    type: number;\n    encode: ExtensionEncoderType<ContextType>;\n    decode: ExtensionDecoderType<ContextType>;\n  }): void {\n    if (type >= 0) {\n      // custom extensions\n      this.encoders[type] = encode;\n      this.decoders[type] = decode;\n    } else {\n      // built-in extensions\n      const index = -1 - type;\n      this.builtInEncoders[index] = encode;\n      this.builtInDecoders[index] = decode;\n    }\n  }\n\n  public tryToEncode(object: unknown, context: ContextType): ExtData | null {\n    // built-in extensions\n    for (let i = 0; i < this.builtInEncoders.length; i++) {\n      const encodeExt = this.builtInEncoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = -1 - i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    // custom extensions\n    for (let i = 0; i < this.encoders.length; i++) {\n      const encodeExt = this.encoders[i];\n      if (encodeExt != null) {\n        const data = encodeExt(object, context);\n        if (data != null) {\n          const type = i;\n          return new ExtData(type, data);\n        }\n      }\n    }\n\n    if (object instanceof ExtData) {\n      // to keep ExtData as is\n      return object;\n    }\n    return null;\n  }\n\n  public decode(data: Uint8Array, type: number, context: ContextType): unknown {\n    const decodeExt = type < 0 ? this.builtInDecoders[-1 - type] : this.decoders[type];\n    if (decodeExt) {\n      return decodeExt(data, type, context);\n    } else {\n      // decode() does not fail, returns ExtData instead.\n      return new ExtData(type, data);\n    }\n  }\n}\n"],"mappings":"AAAA;AAEA,SAASA,OAAO,QAAQ,eAAe;AACvC,SAASC,kBAAkB,QAAQ,iBAAiB;AAqBpD,OAAM,MAAOC,cAAc;EAgBzBC,YAAA;IARA;IACiB,KAAAC,eAAe,GAAgE,EAAE;IACjF,KAAAC,eAAe,GAAgE,EAAE;IAElG;IACiB,KAAAC,QAAQ,GAAgE,EAAE;IAC1E,KAAAC,QAAQ,GAAgE,EAAE;IAGzF,IAAI,CAACC,QAAQ,CAACP,kBAAkB,CAAC;EACnC;EAEOO,QAAQA,CAAC;IACdC,IAAI;IACJC,MAAM;IACNC;EAAM,CAKP;IACC,IAAIF,IAAI,IAAI,CAAC,EAAE;MACb;MACA,IAAI,CAACH,QAAQ,CAACG,IAAI,CAAC,GAAGC,MAAM;MAC5B,IAAI,CAACH,QAAQ,CAACE,IAAI,CAAC,GAAGE,MAAM;IAC9B,CAAC,MAAM;MACL;MACA,MAAMC,KAAK,GAAG,CAAC,CAAC,GAAGH,IAAI;MACvB,IAAI,CAACL,eAAe,CAACQ,KAAK,CAAC,GAAGF,MAAM;MACpC,IAAI,CAACL,eAAe,CAACO,KAAK,CAAC,GAAGD,MAAM;IACtC;EACF;EAEOE,WAAWA,CAACC,MAAe,EAAEC,OAAoB;IACtD;IACA,KAAK,IAAIC,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACZ,eAAe,CAACa,MAAM,EAAED,CAAC,EAAE,EAAE;MACpD,MAAME,SAAS,GAAG,IAAI,CAACd,eAAe,CAACY,CAAC,CAAC;MACzC,IAAIE,SAAS,IAAI,IAAI,EAAE;QACrB,MAAMC,IAAI,GAAGD,SAAS,CAACJ,MAAM,EAAEC,OAAO,CAAC;QACvC,IAAII,IAAI,IAAI,IAAI,EAAE;UAChB,MAAMV,IAAI,GAAG,CAAC,CAAC,GAAGO,CAAC;UACnB,OAAO,IAAIhB,OAAO,CAACS,IAAI,EAAEU,IAAI,CAAC;QAChC;MACF;IACF;IAEA;IACA,KAAK,IAAIH,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAG,IAAI,CAACV,QAAQ,CAACW,MAAM,EAAED,CAAC,EAAE,EAAE;MAC7C,MAAME,SAAS,GAAG,IAAI,CAACZ,QAAQ,CAACU,CAAC,CAAC;MAClC,IAAIE,SAAS,IAAI,IAAI,EAAE;QACrB,MAAMC,IAAI,GAAGD,SAAS,CAACJ,MAAM,EAAEC,OAAO,CAAC;QACvC,IAAII,IAAI,IAAI,IAAI,EAAE;UAChB,MAAMV,IAAI,GAAGO,CAAC;UACd,OAAO,IAAIhB,OAAO,CAACS,IAAI,EAAEU,IAAI,CAAC;QAChC;MACF;IACF;IAEA,IAAIL,MAAM,YAAYd,OAAO,EAAE;MAC7B;MACA,OAAOc,MAAM;IACf;IACA,OAAO,IAAI;EACb;EAEOH,MAAMA,CAACQ,IAAgB,EAAEV,IAAY,EAAEM,OAAoB;IAChE,MAAMK,SAAS,GAAGX,IAAI,GAAG,CAAC,GAAG,IAAI,CAACJ,eAAe,CAAC,CAAC,CAAC,GAAGI,IAAI,CAAC,GAAG,IAAI,CAACF,QAAQ,CAACE,IAAI,CAAC;IAClF,IAAIW,SAAS,EAAE;MACb,OAAOA,SAAS,CAACD,IAAI,EAAEV,IAAI,EAAEM,OAAO,CAAC;IACvC,CAAC,MAAM;MACL;MACA,OAAO,IAAIf,OAAO,CAACS,IAAI,EAAEU,IAAI,CAAC;IAChC;EACF;;AAhFuBjB,cAAA,CAAAmB,YAAY,GAAkC,IAAInB,cAAc,EAAE","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}