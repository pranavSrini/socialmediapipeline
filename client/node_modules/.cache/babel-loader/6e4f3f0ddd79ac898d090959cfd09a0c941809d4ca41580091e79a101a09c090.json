{"ast":null,"code":"var arrayMap = require('./_arrayMap'),\n  baseIntersection = require('./_baseIntersection'),\n  baseRest = require('./_baseRest'),\n  castArrayLikeObject = require('./_castArrayLikeObject'),\n  last = require('./last');\n\n/**\n * This method is like `_.intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. The order and references\n * of result values are determined by the first array. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.intersectionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }]\n */\nvar intersectionWith = baseRest(function (arrays) {\n  var comparator = last(arrays),\n    mapped = arrayMap(arrays, castArrayLikeObject);\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  if (comparator) {\n    mapped.pop();\n  }\n  return mapped.length && mapped[0] === arrays[0] ? baseIntersection(mapped, undefined, comparator) : [];\n});\nmodule.exports = intersectionWith;","map":{"version":3,"names":["arrayMap","require","baseIntersection","baseRest","castArrayLikeObject","last","intersectionWith","arrays","comparator","mapped","undefined","pop","length","module","exports"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/lodash/intersectionWith.js"],"sourcesContent":["var arrayMap = require('./_arrayMap'),\n    baseIntersection = require('./_baseIntersection'),\n    baseRest = require('./_baseRest'),\n    castArrayLikeObject = require('./_castArrayLikeObject'),\n    last = require('./last');\n\n/**\n * This method is like `_.intersection` except that it accepts `comparator`\n * which is invoked to compare elements of `arrays`. The order and references\n * of result values are determined by the first array. The comparator is\n * invoked with two arguments: (arrVal, othVal).\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of intersecting values.\n * @example\n *\n * var objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }];\n * var others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }];\n *\n * _.intersectionWith(objects, others, _.isEqual);\n * // => [{ 'x': 1, 'y': 2 }]\n */\nvar intersectionWith = baseRest(function(arrays) {\n  var comparator = last(arrays),\n      mapped = arrayMap(arrays, castArrayLikeObject);\n\n  comparator = typeof comparator == 'function' ? comparator : undefined;\n  if (comparator) {\n    mapped.pop();\n  }\n  return (mapped.length && mapped[0] === arrays[0])\n    ? baseIntersection(mapped, undefined, comparator)\n    : [];\n});\n\nmodule.exports = intersectionWith;\n"],"mappings":"AAAA,IAAIA,QAAQ,GAAGC,OAAO,CAAC,aAAa,CAAC;EACjCC,gBAAgB,GAAGD,OAAO,CAAC,qBAAqB,CAAC;EACjDE,QAAQ,GAAGF,OAAO,CAAC,aAAa,CAAC;EACjCG,mBAAmB,GAAGH,OAAO,CAAC,wBAAwB,CAAC;EACvDI,IAAI,GAAGJ,OAAO,CAAC,QAAQ,CAAC;;AAE5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIK,gBAAgB,GAAGH,QAAQ,CAAC,UAASI,MAAM,EAAE;EAC/C,IAAIC,UAAU,GAAGH,IAAI,CAACE,MAAM,CAAC;IACzBE,MAAM,GAAGT,QAAQ,CAACO,MAAM,EAAEH,mBAAmB,CAAC;EAElDI,UAAU,GAAG,OAAOA,UAAU,IAAI,UAAU,GAAGA,UAAU,GAAGE,SAAS;EACrE,IAAIF,UAAU,EAAE;IACdC,MAAM,CAACE,GAAG,CAAC,CAAC;EACd;EACA,OAAQF,MAAM,CAACG,MAAM,IAAIH,MAAM,CAAC,CAAC,CAAC,KAAKF,MAAM,CAAC,CAAC,CAAC,GAC5CL,gBAAgB,CAACO,MAAM,EAAEC,SAAS,EAAEF,UAAU,CAAC,GAC/C,EAAE;AACR,CAAC,CAAC;AAEFK,MAAM,CAACC,OAAO,GAAGR,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}