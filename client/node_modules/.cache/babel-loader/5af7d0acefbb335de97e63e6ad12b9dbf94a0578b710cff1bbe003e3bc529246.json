{"ast":null,"code":"\"use strict\";\n\nvar __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  var desc = Object.getOwnPropertyDescriptor(m, k);\n  if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n    desc = {\n      enumerable: true,\n      get: function () {\n        return m[k];\n      }\n    };\n  }\n  Object.defineProperty(o, k2, desc);\n} : function (o, m, k, k2) {\n  if (k2 === undefined) k2 = k;\n  o[k2] = m[k];\n});\nvar __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {\n  Object.defineProperty(o, \"default\", {\n    enumerable: true,\n    value: v\n  });\n} : function (o, v) {\n  o[\"default\"] = v;\n});\nvar __importStar = this && this.__importStar || function (mod) {\n  if (mod && mod.__esModule) return mod;\n  var result = {};\n  if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n  __setModuleDefault(result, mod);\n  return result;\n};\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nexports.__esModule = true;\nvar clone_object_1 = __importDefault(require(\"../lib/clone-object\"));\nvar matches_mimetype_1 = __importDefault(require(\"../lib/matches-mimetype\"));\nvar openapi_to_json_schema_1 = __importStar(require(\"../lib/openapi-to-json-schema\"));\nvar isJSON = matches_mimetype_1[\"default\"].json;\n/**\n * Turn a header map from OpenAPI 3.0.3 (and some earlier versions too) into a schema.\n *\n * Note: This does not support OpenAPI 3.1.0's header format.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#headerObject}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.3.md#headerObject}\n * @param response Response object to build a JSON Schema object for its headers for.\n */\nfunction buildHeadersSchema(response, opts) {\n  var headers = response.headers;\n  var headersSchema = {\n    type: 'object',\n    properties: {}\n  };\n  Object.keys(headers).forEach(function (key) {\n    if (headers[key] && headers[key].schema) {\n      var header = headers[key];\n      // TODO: Response headers are essentially parameters in OAS\n      //    This means they can have content instead of schema.\n      //    We should probably support that in the future\n      headersSchema.properties[key] = (0, openapi_to_json_schema_1[\"default\"])(header.schema, {\n        addEnumsToDescriptions: true,\n        transformer: opts.transformer\n      });\n      if (header.description) {\n        headersSchema.properties[key].description = header.description;\n      }\n    }\n  });\n  var headersWrapper = {\n    schema: headersSchema,\n    type: 'object',\n    label: 'Headers'\n  };\n  if (response.description && headersWrapper.schema) {\n    headersWrapper.description = response.description;\n  }\n  return headersWrapper;\n}\n/**\n * Extract all the response schemas, matching the format of `get-parameters-as-json-schema`.\n *\n * Note: This expects a dereferenced schema.\n *\n * @param operation Operation to construct a response JSON Schema for.\n * @param api The OpenAPI definition that this operation originates.\n * @param statusCode The response status code to generate a schema for.\n */\nfunction getResponseAsJSONSchema(operation, api, statusCode, opts) {\n  var response = operation.getResponseByStatusCode(statusCode);\n  var jsonSchema = [];\n  if (!response) {\n    return null;\n  }\n  var hasCircularRefs = false;\n  var hasDiscriminatorMappingRefs = false;\n  function refLogger(ref, type) {\n    if (type === 'ref') {\n      hasCircularRefs = true;\n    } else {\n      hasDiscriminatorMappingRefs = true;\n    }\n  }\n  /**\n   * @param content An array of `MediaTypeObject`'s to retrieve a preferred schema out of. We\n   *    prefer JSON media types.\n   */\n  function getPreferredSchema(content) {\n    if (!content) {\n      return null;\n    }\n    var contentTypes = Object.keys(content);\n    if (!contentTypes.length) {\n      return null;\n    }\n    // eslint-disable-next-line no-plusplus\n    for (var i = 0; i < contentTypes.length; i++) {\n      if (isJSON(contentTypes[i])) {\n        return (0, openapi_to_json_schema_1[\"default\"])((0, clone_object_1[\"default\"])(content[contentTypes[i]].schema), {\n          addEnumsToDescriptions: true,\n          refLogger: refLogger,\n          transformer: opts.transformer\n        });\n      }\n    }\n    // We always want to prefer the JSON-compatible content types over everything else but if we\n    // haven't found one we should default to the first available.\n    var contentType = contentTypes.shift();\n    return (0, openapi_to_json_schema_1[\"default\"])((0, clone_object_1[\"default\"])(content[contentType].schema), {\n      addEnumsToDescriptions: true,\n      refLogger: refLogger,\n      transformer: opts.transformer\n    });\n  }\n  var foundSchema = getPreferredSchema(response.content);\n  if (foundSchema) {\n    var schema = (0, clone_object_1[\"default\"])(foundSchema);\n    var schemaWrapper = {\n      // If there's no `type` then the root schema is a circular `$ref` that we likely won't be\n      // able to render so instead of generating a JSON Schema with an `undefined` type we should\n      // default to `string` so there's at least *something* the end-user can interact with.\n      type: foundSchema.type || 'string',\n      schema: (0, openapi_to_json_schema_1.isPrimitive)(schema) ? schema : __assign(__assign({}, schema), {\n        $schema: (0, openapi_to_json_schema_1.getSchemaVersionString)(schema, api)\n      }),\n      label: 'Response body'\n    };\n    if (response.description && schemaWrapper.schema) {\n      schemaWrapper.description = response.description;\n    }\n    /**\n     * Since this library assumes that the schema has already been dereferenced, adding every\n     * component here that **isn't** circular adds a ton of bloat so it'd be cool if `components`\n     * was just the remaining `$ref` pointers that are still being referenced.\n     *\n     * @todo\n     */\n    if (api.components && schemaWrapper.schema) {\n      // We should only include components if we've got circular refs or we have discriminator\n      // mapping refs (we want to include them).\n      if (hasCircularRefs || hasDiscriminatorMappingRefs && opts.includeDiscriminatorMappingRefs) {\n        schemaWrapper.schema.components = api.components;\n      }\n    }\n    jsonSchema.push(schemaWrapper);\n  }\n  // 3.0.3 and earlier headers. TODO: New format for 3.1.0\n  if (response.headers) {\n    jsonSchema.push(buildHeadersSchema(response, opts));\n  }\n  return jsonSchema.length ? jsonSchema : null;\n}\nexports[\"default\"] = getResponseAsJSONSchema;","map":{"version":3,"names":["__assign","Object","assign","t","s","i","n","arguments","length","p","prototype","hasOwnProperty","call","apply","__createBinding","create","o","m","k","k2","undefined","desc","getOwnPropertyDescriptor","__esModule","writable","configurable","enumerable","get","defineProperty","__setModuleDefault","v","value","__importStar","mod","result","__importDefault","exports","clone_object_1","require","matches_mimetype_1","openapi_to_json_schema_1","isJSON","json","buildHeadersSchema","response","opts","headers","headersSchema","type","properties","keys","forEach","key","schema","header","addEnumsToDescriptions","transformer","description","headersWrapper","label","getResponseAsJSONSchema","operation","api","statusCode","getResponseByStatusCode","jsonSchema","hasCircularRefs","hasDiscriminatorMappingRefs","refLogger","ref","getPreferredSchema","content","contentTypes","contentType","shift","foundSchema","schemaWrapper","isPrimitive","$schema","getSchemaVersionString","components","includeDiscriminatorMappingRefs","push"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/client/.api/apis/aivideoapi/node_modules/oas/dist/operation/get-response-as-json-schema.js"],"sourcesContent":["\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nvar __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    var desc = Object.getOwnPropertyDescriptor(m, k);\n    if (!desc || (\"get\" in desc ? !m.__esModule : desc.writable || desc.configurable)) {\n      desc = { enumerable: true, get: function() { return m[k]; } };\n    }\n    Object.defineProperty(o, k2, desc);\n}) : (function(o, m, k, k2) {\n    if (k2 === undefined) k2 = k;\n    o[k2] = m[k];\n}));\nvar __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {\n    Object.defineProperty(o, \"default\", { enumerable: true, value: v });\n}) : function(o, v) {\n    o[\"default\"] = v;\n});\nvar __importStar = (this && this.__importStar) || function (mod) {\n    if (mod && mod.__esModule) return mod;\n    var result = {};\n    if (mod != null) for (var k in mod) if (k !== \"default\" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);\n    __setModuleDefault(result, mod);\n    return result;\n};\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar clone_object_1 = __importDefault(require(\"../lib/clone-object\"));\nvar matches_mimetype_1 = __importDefault(require(\"../lib/matches-mimetype\"));\nvar openapi_to_json_schema_1 = __importStar(require(\"../lib/openapi-to-json-schema\"));\nvar isJSON = matches_mimetype_1[\"default\"].json;\n/**\n * Turn a header map from OpenAPI 3.0.3 (and some earlier versions too) into a schema.\n *\n * Note: This does not support OpenAPI 3.1.0's header format.\n *\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.0.3.md#headerObject}\n * @see {@link https://github.com/OAI/OpenAPI-Specification/blob/main/versions/3.1.3.md#headerObject}\n * @param response Response object to build a JSON Schema object for its headers for.\n */\nfunction buildHeadersSchema(response, opts) {\n    var headers = response.headers;\n    var headersSchema = {\n        type: 'object',\n        properties: {}\n    };\n    Object.keys(headers).forEach(function (key) {\n        if (headers[key] && headers[key].schema) {\n            var header = headers[key];\n            // TODO: Response headers are essentially parameters in OAS\n            //    This means they can have content instead of schema.\n            //    We should probably support that in the future\n            headersSchema.properties[key] = (0, openapi_to_json_schema_1[\"default\"])(header.schema, {\n                addEnumsToDescriptions: true,\n                transformer: opts.transformer\n            });\n            if (header.description) {\n                headersSchema.properties[key].description = header.description;\n            }\n        }\n    });\n    var headersWrapper = {\n        schema: headersSchema,\n        type: 'object',\n        label: 'Headers'\n    };\n    if (response.description && headersWrapper.schema) {\n        headersWrapper.description = response.description;\n    }\n    return headersWrapper;\n}\n/**\n * Extract all the response schemas, matching the format of `get-parameters-as-json-schema`.\n *\n * Note: This expects a dereferenced schema.\n *\n * @param operation Operation to construct a response JSON Schema for.\n * @param api The OpenAPI definition that this operation originates.\n * @param statusCode The response status code to generate a schema for.\n */\nfunction getResponseAsJSONSchema(operation, api, statusCode, opts) {\n    var response = operation.getResponseByStatusCode(statusCode);\n    var jsonSchema = [];\n    if (!response) {\n        return null;\n    }\n    var hasCircularRefs = false;\n    var hasDiscriminatorMappingRefs = false;\n    function refLogger(ref, type) {\n        if (type === 'ref') {\n            hasCircularRefs = true;\n        }\n        else {\n            hasDiscriminatorMappingRefs = true;\n        }\n    }\n    /**\n     * @param content An array of `MediaTypeObject`'s to retrieve a preferred schema out of. We\n     *    prefer JSON media types.\n     */\n    function getPreferredSchema(content) {\n        if (!content) {\n            return null;\n        }\n        var contentTypes = Object.keys(content);\n        if (!contentTypes.length) {\n            return null;\n        }\n        // eslint-disable-next-line no-plusplus\n        for (var i = 0; i < contentTypes.length; i++) {\n            if (isJSON(contentTypes[i])) {\n                return (0, openapi_to_json_schema_1[\"default\"])((0, clone_object_1[\"default\"])(content[contentTypes[i]].schema), {\n                    addEnumsToDescriptions: true,\n                    refLogger: refLogger,\n                    transformer: opts.transformer\n                });\n            }\n        }\n        // We always want to prefer the JSON-compatible content types over everything else but if we\n        // haven't found one we should default to the first available.\n        var contentType = contentTypes.shift();\n        return (0, openapi_to_json_schema_1[\"default\"])((0, clone_object_1[\"default\"])(content[contentType].schema), {\n            addEnumsToDescriptions: true,\n            refLogger: refLogger,\n            transformer: opts.transformer\n        });\n    }\n    var foundSchema = getPreferredSchema(response.content);\n    if (foundSchema) {\n        var schema = (0, clone_object_1[\"default\"])(foundSchema);\n        var schemaWrapper = {\n            // If there's no `type` then the root schema is a circular `$ref` that we likely won't be\n            // able to render so instead of generating a JSON Schema with an `undefined` type we should\n            // default to `string` so there's at least *something* the end-user can interact with.\n            type: foundSchema.type || 'string',\n            schema: (0, openapi_to_json_schema_1.isPrimitive)(schema)\n                ? schema\n                : __assign(__assign({}, schema), { $schema: (0, openapi_to_json_schema_1.getSchemaVersionString)(schema, api) }),\n            label: 'Response body'\n        };\n        if (response.description && schemaWrapper.schema) {\n            schemaWrapper.description = response.description;\n        }\n        /**\n         * Since this library assumes that the schema has already been dereferenced, adding every\n         * component here that **isn't** circular adds a ton of bloat so it'd be cool if `components`\n         * was just the remaining `$ref` pointers that are still being referenced.\n         *\n         * @todo\n         */\n        if (api.components && schemaWrapper.schema) {\n            // We should only include components if we've got circular refs or we have discriminator\n            // mapping refs (we want to include them).\n            if (hasCircularRefs || (hasDiscriminatorMappingRefs && opts.includeDiscriminatorMappingRefs)) {\n                schemaWrapper.schema.components = api.components;\n            }\n        }\n        jsonSchema.push(schemaWrapper);\n    }\n    // 3.0.3 and earlier headers. TODO: New format for 3.1.0\n    if (response.headers) {\n        jsonSchema.push(buildHeadersSchema(response, opts));\n    }\n    return jsonSchema.length ? jsonSchema : null;\n}\nexports[\"default\"] = getResponseAsJSONSchema;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}