{"ast":null,"code":"\"use strict\";\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\nexports.__esModule = true;\nvar jsonpointer_1 = __importDefault(require(\"jsonpointer\"));\n/**\n * Lookup a reference pointer within an OpenAPI definition and return the schema that it resolves\n * to.\n *\n * @param $ref Reference to look up a schema for.\n * @param definition OpenAPI definition to look for the `$ref` pointer in.\n */\nfunction findSchemaDefinition($ref, definition) {\n  if (definition === void 0) {\n    definition = {};\n  }\n  var origRef = $ref;\n  $ref = $ref.trim();\n  if ($ref === '') {\n    // If this ref is empty, don't bother trying to look for it.\n    return false;\n  }\n  if ($ref.startsWith('#')) {\n    // Decode URI fragment representation.\n    $ref = decodeURIComponent($ref.substring(1));\n  } else {\n    throw new Error(\"Could not find a definition for \".concat(origRef, \".\"));\n  }\n  var current = jsonpointer_1[\"default\"].get(definition, $ref);\n  if (current === undefined) {\n    throw new Error(\"Could not find a definition for \".concat(origRef, \".\"));\n  }\n  return current;\n}\nexports[\"default\"] = findSchemaDefinition;","map":{"version":3,"names":["__importDefault","mod","__esModule","exports","jsonpointer_1","require","findSchemaDefinition","$ref","definition","origRef","trim","startsWith","decodeURIComponent","substring","Error","concat","current","get","undefined"],"sources":["/Users/pranavsrinivasan/Documents/VSCode/aividgen/server/.api/apis/aivideoapi/node_modules/oas/dist/lib/find-schema-definition.js"],"sourcesContent":["\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nexports.__esModule = true;\nvar jsonpointer_1 = __importDefault(require(\"jsonpointer\"));\n/**\n * Lookup a reference pointer within an OpenAPI definition and return the schema that it resolves\n * to.\n *\n * @param $ref Reference to look up a schema for.\n * @param definition OpenAPI definition to look for the `$ref` pointer in.\n */\nfunction findSchemaDefinition($ref, definition) {\n    if (definition === void 0) { definition = {}; }\n    var origRef = $ref;\n    $ref = $ref.trim();\n    if ($ref === '') {\n        // If this ref is empty, don't bother trying to look for it.\n        return false;\n    }\n    if ($ref.startsWith('#')) {\n        // Decode URI fragment representation.\n        $ref = decodeURIComponent($ref.substring(1));\n    }\n    else {\n        throw new Error(\"Could not find a definition for \".concat(origRef, \".\"));\n    }\n    var current = jsonpointer_1[\"default\"].get(definition, $ref);\n    if (current === undefined) {\n        throw new Error(\"Could not find a definition for \".concat(origRef, \".\"));\n    }\n    return current;\n}\nexports[\"default\"] = findSchemaDefinition;\n"],"mappings":"AAAA,YAAY;;AACZ,IAAIA,eAAe,GAAI,IAAI,IAAI,IAAI,CAACA,eAAe,IAAK,UAAUC,GAAG,EAAE;EACnE,OAAQA,GAAG,IAAIA,GAAG,CAACC,UAAU,GAAID,GAAG,GAAG;IAAE,SAAS,EAAEA;EAAI,CAAC;AAC7D,CAAC;AACDE,OAAO,CAACD,UAAU,GAAG,IAAI;AACzB,IAAIE,aAAa,GAAGJ,eAAe,CAACK,OAAO,CAAC,aAAa,CAAC,CAAC;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,oBAAoBA,CAACC,IAAI,EAAEC,UAAU,EAAE;EAC5C,IAAIA,UAAU,KAAK,KAAK,CAAC,EAAE;IAAEA,UAAU,GAAG,CAAC,CAAC;EAAE;EAC9C,IAAIC,OAAO,GAAGF,IAAI;EAClBA,IAAI,GAAGA,IAAI,CAACG,IAAI,CAAC,CAAC;EAClB,IAAIH,IAAI,KAAK,EAAE,EAAE;IACb;IACA,OAAO,KAAK;EAChB;EACA,IAAIA,IAAI,CAACI,UAAU,CAAC,GAAG,CAAC,EAAE;IACtB;IACAJ,IAAI,GAAGK,kBAAkB,CAACL,IAAI,CAACM,SAAS,CAAC,CAAC,CAAC,CAAC;EAChD,CAAC,MACI;IACD,MAAM,IAAIC,KAAK,CAAC,kCAAkC,CAACC,MAAM,CAACN,OAAO,EAAE,GAAG,CAAC,CAAC;EAC5E;EACA,IAAIO,OAAO,GAAGZ,aAAa,CAAC,SAAS,CAAC,CAACa,GAAG,CAACT,UAAU,EAAED,IAAI,CAAC;EAC5D,IAAIS,OAAO,KAAKE,SAAS,EAAE;IACvB,MAAM,IAAIJ,KAAK,CAAC,kCAAkC,CAACC,MAAM,CAACN,OAAO,EAAE,GAAG,CAAC,CAAC;EAC5E;EACA,OAAOO,OAAO;AAClB;AACAb,OAAO,CAAC,SAAS,CAAC,GAAGG,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}