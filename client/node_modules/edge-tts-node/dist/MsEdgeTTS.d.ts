import { OUTPUT_FORMAT } from "./OUTPUT_FORMAT";
import { Readable } from "stream";
import { PITCH } from "./PITCH";
import { RATE } from "./RATE";
import { VOLUME } from "./VOLUME";
export type Voice = {
    Name: string;
    ShortName: string;
    Gender: string;
    Locale: string;
    SuggestedCodec: string;
    FriendlyName: string;
    Status: string;
};
export declare class ProsodyOptions {
    pitch?: PITCH | string;
    rate?: RATE | string | number;
    volume?: VOLUME | string | number;
}
export declare class MsEdgeTTS {
    static wordBoundaryEnabled: boolean;
    static OUTPUT_FORMAT: typeof OUTPUT_FORMAT;
    static TRUSTED_CLIENT_TOKEN: string;
    private static BINARY_DELIM;
    private static VOICE_LANG_REGEX;
    private readonly _enableLogger;
    private readonly _isBrowser;
    private _ws;
    private _voice;
    private _voiceLocale;
    private _outputFormat;
    private _streams;
    private _startTime;
    private readonly _agent;
    private _headers;
    private _arraybuffer;
    private state;
    private static getVoicesUrl;
    private static getSynthUrl;
    private _log;
    static setToken(token: string): void;
    constructor({ agent, headers, enableLogger }: {
        agent?: any;
        headers?: any;
        enableLogger?: boolean;
    });
    private _send;
    private _initClient;
    private _pushData;
    private _pushAudioData;
    private _SSMLTemplate;
    getVoices(): Promise<Voice[]>;
    setConfig(conf: any): void;
    setMetadata(voiceName: string, outputFormat: OUTPUT_FORMAT, voiceLocale?: string): Promise<void>;
    private _metadataCheck;
    close(): void;
    toFile(path: string, input: string, options?: ProsodyOptions): Promise<string>;
    toStream(input: string, options?: ProsodyOptions): Readable;
    rawToFile(path: string, requestSSML: string): Promise<string>;
    rawToStream(requestSSML: string): Readable;
    private _rawSSMLRequestToFile;
    private _rawSSMLRequest;
}
