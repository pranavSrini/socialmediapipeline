"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createOutputConfig = exports.mergeConfig = void 0;
const path_1 = __importDefault(require("path"));
const lodash_1 = require("lodash");
const llm_config_1 = require("./llm-config");
const constant_1 = require("./constant");
const file_1 = require("../utils/file");
const utils_1 = require("../utils/utils");
const defaultPexels = {
    apiKey: '',
    enableProxy: false,
    host: '10.10.1.10',
    port: 1080,
};
const defalutVideoConfig = {
    provider: 'gpt4js',
    pexels: defaultPexels,
    output: '',
    cacheDir: '',
    debug: false,
    lineBreakForce: true,
    addPunctuation: false,
    termsNum: 5,
    subtitleMaxWidth: 9999,
    materialAspectRatio: true,
    lastTime: 5,
    voiceName: 'zh-CN-XiaoxiaoNeural',
    videoAspect: constant_1.VideoAspect.Portrait,
    videoClipDuration: 6,
    voiceVolume: 1.0,
    bgMusicVolume: 0.5,
    textColor: '#FFFFFF',
    textBottom: 20,
    fontSize: 24,
    strokeColor: '#000000',
    strokeWidth: 1,
    perPage: 20,
    isChinese: true,
    removeCache: true,
};
const mergeConfig = (config) => {
    var _a;
    const fconfig = (0, lodash_1.merge)(defalutVideoConfig, config);
    fconfig.provider = (_a = fconfig.provider) !== null && _a !== void 0 ? _a : 'gpt4js';
    fconfig[fconfig.provider] = (0, lodash_1.merge)(llm_config_1.defaultLLMConfig[fconfig.provider], fconfig[fconfig.provider]);
    return fconfig;
};
exports.mergeConfig = mergeConfig;
const createOutputConfig = (config) => {
    if (!config.output)
        throw new Error('Sorry, you must enter an output file path or directory path.');
    const taskId = (0, utils_1.uuid)();
    config.taskId = taskId;
    if ((0, file_1.isFilePath)(config.output)) {
        const dir = path_1.default.dirname(config.output);
        config.cacheDir = path_1.default.join(dir, taskId, 'cache_files');
        config.output = config.output;
    }
    else {
        const dir = path_1.default.join(config.output, taskId);
        config.cacheDir = path_1.default.join(dir, 'cache_files');
        config.output = path_1.default.join(dir, `final.mp4`);
    }
    return config;
};
exports.createOutputConfig = createOutputConfig;
//# sourceMappingURL=config.js.map