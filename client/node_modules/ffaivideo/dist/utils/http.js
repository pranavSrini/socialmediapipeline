"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isNetUrl = exports.getAxiosConfig = exports.buildApiUrl = exports.httpGet = void 0;
const https_1 = __importDefault(require("https"));
const axios_1 = __importDefault(require("axios"));
const getAxiosConfig = (site) => {
    const proxyConfig = {
        host: site.host || '',
        port: site.port || 0,
    };
    const axiosConfig = {
        headers: {
            Authorization: site.apiKey,
        },
        proxy: site.enableProxy ? proxyConfig : false,
        timeout: 2 * 60 * 1000,
        httpsAgent: new https_1.default.Agent({ rejectUnauthorized: false }),
    };
    return axiosConfig;
};
exports.getAxiosConfig = getAxiosConfig;
const httpGet = async (queryUrl, options = {}, site) => {
    const axiosConfig = getAxiosConfig(site);
    try {
        const r = await axios_1.default.get(queryUrl, { ...axiosConfig, ...options });
        if (r.status === 200 && r.data) {
            return r.data;
        }
    }
    catch (e) {
        console.log('Http error: ', e);
    }
    return null;
};
exports.httpGet = httpGet;
const buildApiUrl = (baseUrl, data = {}) => {
    const params = new URLSearchParams();
    for (const [key, value] of Object.entries(data)) {
        if (value !== undefined && value !== null) {
            params.append(key, value.toString());
        }
    }
    return params.toString() ? `${baseUrl}?${params.toString()}` : baseUrl;
};
exports.buildApiUrl = buildApiUrl;
const isNetUrl = (url) => {
    return /^(https?|ftp|file|ws|wss):\/\//.test(url);
};
exports.isNetUrl = isNetUrl;
//# sourceMappingURL=http.js.map