"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.convertHexToAssColor = exports.strContainsPunctuation = exports.getEnumKeyByValue = exports.getSampleItems = exports.insertTriplet = exports.greater = exports.approxEq = exports.less = exports.uuid = void 0;
const uuid_1 = require("uuid");
const lodash_1 = require("lodash");
const PUNCTUATIONS = [
    '!',
    '"',
    '#',
    '$',
    '%',
    '&',
    "'",
    '(',
    ')',
    '*',
    '+',
    ',',
    '-',
    '.',
    '/',
    ':',
    ';',
    '<',
    '=',
    '>',
    '?',
    '@',
    '[',
    '\\',
    ']',
    '^',
    '_',
    '`',
    '{',
    '|',
    '}',
    '~',
];
const strContainsPunctuation = (word) => {
    for (const p of PUNCTUATIONS) {
        if (word.includes(p)) {
            return true;
        }
    }
    return false;
};
exports.strContainsPunctuation = strContainsPunctuation;
const getEnumKeyByValue = (obj, value) => {
    for (const key in obj) {
        if (obj[key] === value) {
            return key;
        }
    }
    throw new Error(`No key found for value: ${value}`);
};
exports.getEnumKeyByValue = getEnumKeyByValue;
const uuid = (length = -1) => {
    let u = (0, uuid_1.v4)();
    u = u.replace(/-/g, '');
    if (length > 0) {
        u = u.slice(0, length);
    }
    return u;
};
exports.uuid = uuid;
const greater = (a, b) => {
    return a >= b;
};
exports.greater = greater;
const less = (a, b) => {
    return a < b;
};
exports.less = less;
const approxEq = (a, b) => {
    return Math.abs(a - b) < 650;
};
exports.approxEq = approxEq;
const convertHexToAssColor = (hexColor) => {
    if (/^\&H00/g.test(hexColor))
        return hexColor;
    let hex = hexColor.replace('#', '');
    if (hex.length !== 6) {
        throw new Error('Invalid hex color format. Expected format: #RRGGBB');
    }
    let r = hex.substring(0, 2);
    let g = hex.substring(2, 4);
    let b = hex.substring(4, 6);
    let assColor = `&H00${b}${g}${r}`;
    return assColor;
};
exports.convertHexToAssColor = convertHexToAssColor;
const insertTriplet = (arr, a, b, c) => {
    const n = arr.length / 3;
    arr.splice(n * 1, 0, a);
    arr.splice(n * 2 + 1, 0, b);
    arr.splice(n * 3 + 2, 0, c);
    return arr;
};
exports.insertTriplet = insertTriplet;
const getSampleItems = (items, count) => {
    if (items.length === 0)
        return items;
    let randoms = (0, lodash_1.sampleSize)(items, count);
    while (randoms.length < count) {
        randoms = randoms.concat((0, lodash_1.sample)(items));
    }
    return randoms.slice(0, count);
};
exports.getSampleItems = getSampleItems;
//# sourceMappingURL=utils.js.map