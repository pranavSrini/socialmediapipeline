"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.removeSpecialCharacters = exports.safeDecodeURIComponent = exports.splitStringAtIndex = exports.normalizeWhitespace = exports.insertStringAt = exports.removeBlankLines = exports.addLineBreaks = void 0;
const removeSpecialCharacters = (str) => {
    const cnRegex = /[，。！？、；：“”‘’（）《》【】〈〉「」『』【】〔〕〖〗〈〉《》「」『』【】〔〕【】﹝﹞（）［］｛｝＜＞﹤﹥「」『』【】＜＞《》「」『』【】]/g;
    const enRegex = /[!"#$%&'()*+,\-./:;<=>?@\[\]^_`{|}~]/g;
    return str.replace(cnRegex, '').replace(enRegex, '');
};
exports.removeSpecialCharacters = removeSpecialCharacters;
const normalizeWhitespace = (text) => {
    return text
        .replace('\n', ' ')
        .replace('[', ' ')
        .replace(']', ' ')
        .replace('(', ' ')
        .replace(')', ' ')
        .replace('{', ' ')
        .replace('}', ' ')
        .trim();
};
exports.normalizeWhitespace = normalizeWhitespace;
const splitStringAtIndex = (arr, index, x) => {
    if (index >= 0 && index < arr.length) {
        const str = arr[index];
        if (x >= 0 && x < str.length) {
            const firstPart = str.slice(0, x);
            const secondPart = str.slice(x);
            arr.splice(index, 1, firstPart, secondPart);
        }
    }
    return arr;
};
exports.splitStringAtIndex = splitStringAtIndex;
const insertStringAt = (str, index, toInsert) => {
    if (index > str.length || index < 0) {
        throw new Error('Index out of bounds');
    }
    return str.slice(0, index) + toInsert + str.slice(index);
};
exports.insertStringAt = insertStringAt;
const safeDecodeURIComponent = (str) => {
    try {
        return decodeURIComponent(str);
    }
    catch (e) {
        return str;
    }
};
exports.safeDecodeURIComponent = safeDecodeURIComponent;
const removeBlankLines = (text) => {
    return text
        .split('\n')
        .filter(line => line.trim() !== '')
        .join('\n');
};
exports.removeBlankLines = removeBlankLines;
const addLineBreaks = (lineText, subtitleMaxWidth) => {
    let result = '';
    for (let i = 0; i < lineText.length; i += subtitleMaxWidth) {
        if (i + subtitleMaxWidth < lineText.length) {
            result += lineText.slice(i, i + subtitleMaxWidth) + '\\N';
        }
        else {
            result += lineText.slice(i, i + subtitleMaxWidth);
        }
    }
    return result;
};
exports.addLineBreaks = addLineBreaks;
//# sourceMappingURL=char.js.map