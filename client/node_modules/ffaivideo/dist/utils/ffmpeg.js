"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.setDefaultFFPath = exports.runFFmpegCommand = exports.getMetadata = void 0;
const fluent_ffmpeg_1 = __importDefault(require("fluent-ffmpeg"));
const ffmpeg_1 = __importDefault(require("@ffmpeg-installer/ffmpeg"));
const ffprobe_1 = __importDefault(require("@ffprobe-installer/ffprobe"));
const log_1 = require("../utils/log");
let isFFmpegPathSet = false;
const setDefaultFFPath = () => {
    if (isFFmpegPathSet)
        return;
    try {
        fluent_ffmpeg_1.default.setFfmpegPath(ffmpeg_1.default.path);
        fluent_ffmpeg_1.default.setFfprobePath(ffprobe_1.default.path);
        isFFmpegPathSet = true;
    }
    catch (e) {
        log_1.Logger.log(e);
    }
};
exports.setDefaultFFPath = setDefaultFFPath;
const getMetadata = async (videoPath) => {
    let duration = 0;
    let width = 0;
    let height = 0;
    try {
        let metadata = (await runFFProbeCommand(videoPath));
        if (!metadata)
            throw Error('ffprobe error');
        const video = metadata.streams.find(stream => stream.codec_type === 'video');
        duration = metadata.format.duration || 0;
        width = (video === null || video === void 0 ? void 0 : video.width) || 0;
        height = (video === null || video === void 0 ? void 0 : video.height) || 0;
    }
    catch (e) {
        console.log(e);
        duration = 0;
        width = -1;
        height = -1;
    }
    return { duration, width, height };
};
exports.getMetadata = getMetadata;
const runFFProbeCommand = (file) => {
    return new Promise((resolve, reject) => {
        fluent_ffmpeg_1.default.ffprobe(file, (err, data) => {
            if (err) {
                reject(err);
            }
            else {
                resolve(data);
            }
        });
    });
};
const runFFmpegCommand = (command) => {
    return new Promise((resolve, reject) => {
        command
            .on('start', commandLine => {
            log_1.Logger.log('Command: ' + commandLine);
        })
            .on('end', () => {
            resolve('end');
        })
            .on('error', (err, stdout, stderr) => {
            log_1.Logger.log('Cannot process video: ' + stdout);
            log_1.Logger.log('-----------------------------------');
            log_1.Logger.log(err.message, stderr);
            reject(err);
        })
            .run();
    });
};
exports.runFFmpegCommand = runFFmpegCommand;
//# sourceMappingURL=ffmpeg.js.map