"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.isFilePath = exports.copyLocalFile = exports.writeSubtitles = exports.writeFileWithStream = void 0;
const md5_1 = __importDefault(require("md5"));
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const log_1 = require("../utils/log");
const isFilePath = (url) => {
    const ext = path_1.default.extname(url);
    return ext !== '';
};
exports.isFilePath = isFilePath;
const writeFileWithStream = (stream, videoPath) => {
    return new Promise((resolve, reject) => {
        const writer = fs_extra_1.default.createWriteStream(videoPath);
        stream.on('error', reject);
        writer.on('error', reject);
        writer.on('finish', () => {
            log_1.Logger.log(`Video ${videoPath} has been downloaded successfully.`);
            resolve(videoPath);
        });
        stream.pipe(writer);
    });
};
exports.writeFileWithStream = writeFileWithStream;
const copyLocalFile = async (targetPath, cacheDir) => {
    try {
        await fs_extra_1.default.ensureDir(cacheDir);
        const videoId = `vid-${(0, md5_1.default)(Math.random().toString())}`;
        const videoPath = path_1.default.join(cacheDir, `${videoId}.mp4`);
        await fs_extra_1.default.copy(targetPath, videoPath);
        return videoPath;
    }
    catch (err) {
        return null;
    }
};
exports.copyLocalFile = copyLocalFile;
const writeSubtitles = async (subtitleFile, formattedSubtitles, scriptLinescLength) => {
    try {
        if (formattedSubtitles.length > 2) {
            await fs_extra_1.default.writeFile(subtitleFile, formattedSubtitles.join('\n') + '\n', {
                encoding: 'utf-8',
            });
            log_1.Logger.log(`Subtitle synthesis successful. ${formattedSubtitles.length}`);
        }
        else {
            log_1.Logger.log(`Sorry, getEqualedLine no vocabulary equaled. formattedSubtitles.length ${formattedSubtitles.length}`);
            await fs_extra_1.default.writeFile(subtitleFile, '', { encoding: 'utf-8' });
        }
        if (formattedSubtitles.length !== scriptLinescLength) {
            log_1.Logger.warn(`formattedSubtitles.length != scriptLines.length, formattedSubtitles len: ${formattedSubtitles.length}, scriptLines len: ${scriptLinescLength}`);
        }
    }
    catch (e) {
        log_1.Logger.error(`subtitle failed, error: ${e}`);
    }
};
exports.writeSubtitles = writeSubtitles;
//# sourceMappingURL=file.js.map