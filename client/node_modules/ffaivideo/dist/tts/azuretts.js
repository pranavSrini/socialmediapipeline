"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.azureTTS = void 0;
const sdk = __importStar(require("microsoft-cognitiveservices-speech-sdk"));
const log_1 = require("../utils/log");
const sub_maker_1 = require("../sub-maker");
const azureTTS = async (text, voiceName, voiceFile, settings) => {
    return new Promise((resolve, reject) => {
        const subMaker = new sub_maker_1.SubMaker();
        const audioConfig = sdk.AudioConfig.fromAudioFileOutput(voiceFile);
        const speechConfig = sdk.SpeechConfig.fromSubscription(settings.subscriptionKey, settings.serviceRegion);
        speechConfig.speechSynthesisLanguage =
            settings.language || getLanguageCode(voiceName);
        speechConfig.speechSynthesisVoiceName = voiceName;
        speechConfig.speechSynthesisOutputFormat =
            sdk.SpeechSynthesisOutputFormat.Audio16Khz32KBitRateMonoMp3;
        const synthesizer = new sdk.SpeechSynthesizer(speechConfig, audioConfig);
        synthesizer.synthesisCompleted = (s, e) => {
            log_1.Logger.log(`(synthesized) Reason: ${sdk.ResultReason[e.result.reason]} Audio length: ${e.result.audioData.byteLength}`);
        };
        synthesizer.synthesisStarted = () => {
        };
        synthesizer.wordBoundary = (s, e) => {
            log_1.Logger.nolog(`(WordBoundary), Text: ${e.text}, Audio offset: ${e.audioOffset / 10000}ms duration: ${e.duration / 10000}ms.`);
            subMaker.createSub([e.audioOffset, e.duration], e.text);
        };
        synthesizer.speakTextAsync(text, result => {
            log_1.Logger.log('azuretts synthesizer complete');
            synthesizer.close();
            resolve(subMaker);
        }, err => {
            log_1.Logger.error('azuretts err - ' + err);
            synthesizer.close();
            reject(null);
        });
    });
};
exports.azureTTS = azureTTS;
function getLanguageCode(voiceName) {
    const match = voiceName.match(/^([a-z]{2}-[A-Z]{2})/);
    if (match) {
        return match[1];
    }
    return 'zh-CN';
}
//# sourceMappingURL=azuretts.js.map